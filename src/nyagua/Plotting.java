/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2010 Rudi Giacomini Pilon *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package nyagua;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import jcckit.GraphicsPlotCanvas;
import jcckit.data.DataPlot;
import nyagua.data.Setting;

/**
 * Plotting config form
 * 
 * @author Rudi Giacomini Pilon
 * @version 1.0
 */
public class Plotting extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    /** Creates new form Plotting */
    public Plotting(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateCombo(configComboBox);
        if ( System.getProperty("os.name" ).toLowerCase( ).startsWith("mac os x" )){
            NO2CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            NO3CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            NHCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            NH3CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            KHCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            GHCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            PHCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            FECheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            tempCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            CO2CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            condCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            CACheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            MGCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            CUCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            PO4CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            O2CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            densCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            gridCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            I2CheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            NaCheckBox.putClientProperty("JComponent.sizeVariant", "mini" );
            SwingUtilities.updateComponentTreeUI(valuesPanel); 
        }
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        valuesPanel = new javax.swing.JPanel();
        NO2CheckBox = new javax.swing.JCheckBox();
        NO3CheckBox = new javax.swing.JCheckBox();
        NHCheckBox = new javax.swing.JCheckBox();
        KHCheckBox = new javax.swing.JCheckBox();
        GHCheckBox = new javax.swing.JCheckBox();
        PHCheckBox = new javax.swing.JCheckBox();
        FECheckBox = new javax.swing.JCheckBox();
        tempCheckBox = new javax.swing.JCheckBox();
        CO2CheckBox = new javax.swing.JCheckBox();
        condCheckBox = new javax.swing.JCheckBox();
        CACheckBox = new javax.swing.JCheckBox();
        MGCheckBox = new javax.swing.JCheckBox();
        CUCheckBox = new javax.swing.JCheckBox();
        PO4CheckBox = new javax.swing.JCheckBox();
        O2CheckBox = new javax.swing.JCheckBox();
        densCheckBox = new javax.swing.JCheckBox();
        NH3CheckBox = new javax.swing.JCheckBox();
        I2CheckBox = new javax.swing.JCheckBox();
        NaCheckBox = new javax.swing.JCheckBox();
        optionsPanel = new javax.swing.JPanel();
        gridCheckBox = new javax.swing.JCheckBox();
        keyRadioButton = new javax.swing.JRadioButton();
        keyBoxRadioButton = new javax.swing.JRadioButton();
        keyNoRadioButton = new javax.swing.JRadioButton();
        gridstepSpinner = new javax.swing.JSpinner();
        outputPanel = new javax.swing.JPanel();
        outVideoRadioButton = new javax.swing.JRadioButton();
        outPngRadioButton = new javax.swing.JRadioButton();
        outPsRadioButton = new javax.swing.JRadioButton();
        SaveButton = new javax.swing.JButton();
        configComboBox = new javax.swing.JComboBox();
        deleteConfigButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ok_16x.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        okButton.setText(bundle.getString("OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 8, 6);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        cancelButton.setText(bundle.getString("CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 8, 12);
        getContentPane().add(cancelButton, gridBagConstraints);

        valuesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("plot.values"))); // NOI18N
        valuesPanel.setPreferredSize(new java.awt.Dimension(91, 484));

        NO2CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        NO2CheckBox.setText(bundle.getString("NO2")); // NOI18N

        NO3CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        NO3CheckBox.setText(bundle.getString("NO3")); // NOI18N

        NHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        NHCheckBox.setText(bundle.getString("NH")); // NOI18N

        KHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        KHCheckBox.setText(bundle.getString("KH")); // NOI18N

        GHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        GHCheckBox.setText(bundle.getString("GH")); // NOI18N

        PHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        PHCheckBox.setText(bundle.getString("PH")); // NOI18N

        FECheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        FECheckBox.setText(bundle.getString("FE")); // NOI18N

        tempCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        tempCheckBox.setText(bundle.getString("TEMP")); // NOI18N

        CO2CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        CO2CheckBox.setText(bundle.getString("CO2")); // NOI18N

        condCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        condCheckBox.setText(bundle.getString("COND")); // NOI18N

        CACheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        CACheckBox.setText(bundle.getString("CA")); // NOI18N

        MGCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        MGCheckBox.setText(bundle.getString("MG")); // NOI18N

        CUCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        CUCheckBox.setText(bundle.getString("CU")); // NOI18N

        PO4CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        PO4CheckBox.setText(bundle.getString("PO4")); // NOI18N

        O2CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        O2CheckBox.setText(bundle.getString("O2")); // NOI18N

        densCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        densCheckBox.setText(bundle.getString("DENS")); // NOI18N

        NH3CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        NH3CheckBox.setText(bundle.getString("NH3")); // NOI18N

        I2CheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        I2CheckBox.setText(bundle.getString("Iodine")); // NOI18N

        NaCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        NaCheckBox.setText(bundle.getString("Salinity")); // NOI18N

        javax.swing.GroupLayout valuesPanelLayout = new javax.swing.GroupLayout(valuesPanel);
        valuesPanel.setLayout(valuesPanelLayout);
        valuesPanelLayout.setHorizontalGroup(
            valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NO2CheckBox)
                    .addComponent(NO3CheckBox)
                    .addComponent(NHCheckBox)
                    .addComponent(KHCheckBox)
                    .addComponent(GHCheckBox)
                    .addComponent(PO4CheckBox)
                    .addComponent(FECheckBox)
                    .addComponent(tempCheckBox)
                    .addComponent(CO2CheckBox)
                    .addComponent(condCheckBox)
                    .addComponent(CACheckBox)
                    .addComponent(MGCheckBox)
                    .addComponent(CUCheckBox)
                    .addComponent(O2CheckBox)
                    .addComponent(densCheckBox)
                    .addComponent(NH3CheckBox)
                    .addComponent(PHCheckBox)
                    .addComponent(I2CheckBox)
                    .addComponent(NaCheckBox))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        valuesPanelLayout.setVerticalGroup(
            valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CACheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(condCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CO2CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CUCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(densCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FECheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(KHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MGCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NH3CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NO2CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NO3CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(O2CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PO4CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tempCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(I2CheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NaCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 3, 0);
        getContentPane().add(valuesPanel, gridBagConstraints);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Options"))); // NOI18N

        gridCheckBox.setText(bundle.getString("GRID")); // NOI18N
        gridCheckBox.setToolTipText(bundle.getString("ENABLE/DISABLE_GRID")); // NOI18N

        buttonGroup1.add(keyRadioButton);
        keyRadioButton.setText(bundle.getString("KEY")); // NOI18N

        buttonGroup1.add(keyBoxRadioButton);
        keyBoxRadioButton.setText(bundle.getString("BOXED_KEY")); // NOI18N

        buttonGroup1.add(keyNoRadioButton);
        keyNoRadioButton.setText(bundle.getString("NO_KEY")); // NOI18N

        gridstepSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"0.1", "0.2", "0.25", "0.5", "1", "1.5", "2", "2.5", "5", "10"}));
        gridstepSpinner.setToolTipText(bundle.getString("GRID_SPACING")); // NOI18N

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(gridCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(gridstepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyNoRadioButton)
                    .addComponent(keyBoxRadioButton)
                    .addComponent(keyRadioButton))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridCheckBox)
                    .addComponent(gridstepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(keyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyBoxRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyNoRadioButton)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 12);
        getContentPane().add(optionsPanel, gridBagConstraints);

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("plot.output"))); // NOI18N

        buttonGroup2.add(outVideoRadioButton);
        outVideoRadioButton.setText(bundle.getString("VIDEO")); // NOI18N

        buttonGroup2.add(outPngRadioButton);
        outPngRadioButton.setText(bundle.getString("PNG")); // NOI18N

        buttonGroup2.add(outPsRadioButton);
        outPsRadioButton.setText(bundle.getString("POSTSCRIPT")); // NOI18N

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outPsRadioButton)
                    .addComponent(outPngRadioButton)
                    .addComponent(outVideoRadioButton))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addComponent(outVideoRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outPngRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outPsRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 6, 0, 12);
        getContentPane().add(outputPanel, gridBagConstraints);

        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        SaveButton.setText(bundle.getString("SAVE")); // NOI18N
        SaveButton.setToolTipText(bundle.getString("SAVE_CURRENT_SETTINGS")); // NOI18N
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 25, 6);
        getContentPane().add(SaveButton, gridBagConstraints);

        configComboBox.setEditable(true);
        configComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
        configComboBox.setToolTipText(bundle.getString("ENTER_CONFIG")); // NOI18N
        configComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 2, 10);
        getContentPane().add(configComboBox, gridBagConstraints);

        deleteConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        deleteConfigButton.setToolTipText(bundle.getString("DELETE_CONFIG")); // NOI18N
        deleteConfigButton.setMaximumSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.setMinimumSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.setPreferredSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteConfigButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 2, 5);
        getContentPane().add(deleteConfigButton, gridBagConstraints);

        setSize(new java.awt.Dimension(360, 559));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Setting s=Setting.getInstance();
        if (s.getUsegnuplot()) { //gnuplot use is requested
            try {
                this.ExecPlot();
            } catch (    IOException | ClassNotFoundException | SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        }  else {    //use jccKit library
            try {
                this.DoPlot();
            } catch (    ClassNotFoundException | SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        }          
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /** Load default settings */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            LoadSettings(null);
        } catch (ClassNotFoundException | SQLException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    /**
     * Save current values as default settings
     *
     * @param evt
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        saveConfiguration();        
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void saveConfiguration() {
        Setting s=Setting.getInstance();
            String configuration =  configComboBox.getSelectedItem().toString(); 

            String[] configurations;

            //check for new configuration
            int elements = configComboBox.getItemCount();
            if (elements > 0) {
                boolean newConfig=true;
                //check if configuration exists
                for (int x=0; x < elements; x++) {                
                    if (configuration.equalsIgnoreCase(configComboBox.getItemAt(x).toString())) {
                        newConfig=false;
                    }
                }
                if (newConfig) {
                    configComboBox.addItem(configComboBox.getSelectedItem());
                    elements++;
                }

                configurations = new String [elements];
                for (int x=0; x < elements; x++) {                
                    configurations [x] = configComboBox.getItemAt(x).toString();
                }
            }
            else { //only this configuration
                configurations = new String [1];
                configurations[0]= configuration;
            }

            s.setPlConfiguration(configuration);
            s.setPlConfigurations(configurations);

            s.setPl_NO2(NO2CheckBox.isSelected(),configuration);
            s.setPl_NO3(NO3CheckBox.isSelected(),configuration);
            s.setPl_NH(NHCheckBox.isSelected(),configuration);
            s.setPl_NH3(NH3CheckBox.isSelected(),configuration);
            s.setPl_KH(KHCheckBox.isSelected(),configuration);
            s.setPl_GH(GHCheckBox.isSelected(),configuration);
            s.setPl_PH(PHCheckBox.isSelected(),configuration);
            s.setPl_FE(FECheckBox.isSelected(),configuration);
            s.setPl_Temp(tempCheckBox.isSelected(),configuration);
            s.setPl_CO2(CO2CheckBox.isSelected(),configuration);
            s.setPl_Cond(condCheckBox.isSelected(),configuration);
            s.setPl_CA(CACheckBox.isSelected(),configuration);
            s.setPl_MG(MGCheckBox.isSelected(),configuration);
            s.setPl_CU(CUCheckBox.isSelected(),configuration);
            s.setPl_PO4(PO4CheckBox.isSelected(),configuration);
            s.setPl_O2(O2CheckBox.isSelected(),configuration);
            s.setPl_DENS(densCheckBox.isSelected(),configuration);
            s.setPl_I2(I2CheckBox.isSelected(),configuration);
            s.setPl_NA(NaCheckBox.isSelected(),configuration);           
            s.setPl_Grid(gridCheckBox.isSelected(),configuration);

            if (keyRadioButton.isSelected()){
                s.setPl_Key("K",configuration);// NOI18N
            } else if (keyBoxRadioButton.isSelected()){
                s.setPl_Key("B",configuration);// NOI18N
            } else if (keyNoRadioButton.isSelected()){
                s.setPl_Key("N",configuration);// NOI18N
            }

            if (outVideoRadioButton.isSelected()){
                s.setPl_Output("video",configuration);// NOI18N
            } else if (outPngRadioButton.isSelected()){
                s.setPl_Output("png",configuration);// NOI18N
            } else if (outPsRadioButton.isSelected()){
                s.setPl_Output("ps",configuration);// NOI18N
            }

            s.setPl_Gridstep(gridstepSpinner.getValue().toString(),configuration);
    }
    
    private void deleteConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteConfigButtonActionPerformed
        //delete configuration
        int index = configComboBox.getSelectedIndex();
        if (index > 0) {            
            String configName = configComboBox.getSelectedItem().toString();
            int a = JOptionPane.showConfirmDialog(null,
                    java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("DO_YOU_REALLY_WANT_TO_DELETE") + configName,
                    java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("WARNING"), JOptionPane.YES_NO_OPTION);
            if (a == JOptionPane.YES_OPTION) {            
                configComboBox.removeItemAt(index);
                saveConfiguration();
                configComboBox.setSelectedIndex(0);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CANT_DELETE_DEFAULT"),
                    java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("INFORMATION"), JOptionPane.OK_OPTION);
                   
        }
    }//GEN-LAST:event_deleteConfigButtonActionPerformed

    private void configComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configComboBoxActionPerformed
        // Change configuration
        if (configComboBox.getSelectedItem() != null) {            
            try {
                LoadSettings(configComboBox.getSelectedItem().toString());
            } catch (ClassNotFoundException ex) {
                _log.log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        }    
    }//GEN-LAST:event_configComboBoxActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * Plot data using jccKit internal library
     */
    private void DoPlot() throws ClassNotFoundException, SQLException{
         //Settings for lines
        //Tot series dinamic evaluation
        int tot_series=19;    //total number of series
        //Building series captions
        String caption[]=new String[tot_series];
        tot_series=0;    //total number of series
        if (NO2CheckBox.isSelected()) { 
            caption[tot_series]="NO2";//NOI18N
            tot_series++;
        }
        if ( NO3CheckBox.isSelected()) { 
            caption[tot_series]="NO3";//NOI18N
            tot_series++;
        }
        if (NHCheckBox.isSelected()) { 
            caption[tot_series]="NH";//NOI18N
            tot_series++;
        }
        if (KHCheckBox.isSelected()) { 
            caption[tot_series]="KH";//NOI18N
            tot_series++;
        } 
        if (GHCheckBox.isSelected()){ 
            caption[tot_series]="GH";//NOI18N
            tot_series++;
        } 
        if (PHCheckBox.isSelected()){ 
            caption[tot_series]="PH";//NOI18N
            tot_series++;
        } 
        if (FECheckBox.isSelected()){ 
            caption[tot_series]="FE";//NOI18N
            tot_series++;
        } 
        if (tempCheckBox.isSelected()){ 
            caption[tot_series]="temp";//NOI18N
            tot_series++;
        } 
        if(CO2CheckBox.isSelected()){ 
            caption[tot_series]="CO2";//NOI18N
            tot_series++;
        } 
        if(condCheckBox.isSelected()){ 
            caption[tot_series]="cond";//NOI18N
            tot_series++;
        } 
        if(CACheckBox.isSelected()){ 
            caption[tot_series]="CA";//NOI18N
            tot_series++;
        } 
        if(MGCheckBox.isSelected()){ 
            caption[tot_series]="MG";//NOI18N
            tot_series++;
        } 
        if(CUCheckBox.isSelected()){ 
            caption[tot_series]="CU";//NOI18N
            tot_series++;
        } 
        if(PO4CheckBox.isSelected()){ 
            caption[tot_series]="PO4";//NOI18N
            tot_series++;
        } 
        if(O2CheckBox.isSelected()){ 
            caption[tot_series]="O2";//NOI18N
            tot_series++;
        } 
        if(densCheckBox.isSelected()){ 
            caption[tot_series]="DENS";//NOI18N
            tot_series++;
        } 
        if (NH3CheckBox.isSelected()) { 
            caption[tot_series]="NH3";//NOI18N
            tot_series++;
        }
        if(NaCheckBox.isSelected()){ 
            caption[tot_series]="salinity";//NOI18N
            tot_series++;
        } 
        if(I2CheckBox.isSelected()){ 
            caption[tot_series]="iodine";//NOI18N
            tot_series++;
        } 
        if (tot_series == 0){return;}//no selection no action to do
        caption=java.util.Arrays.copyOf(caption, tot_series);
        int x=0;
        int y=1;
        double bigNum=0;
        Date minDate=null;
        Date maxDate=null;
        
        //dimensions are: [serieid] [x|y axis] [point value]
        double[] [] [] datas; 
        datas = new double [tot_series][][];
        //calculating number of elements to plot
        int elements=0;        
        String qry="SELECT count(*) As tot FROM Measures WHERE AqID ='"+ Global.AqID // NOI18N
                +"' "+  Util.getPeriod() + ";";// NOI18N
        DB.openConn();
        ResultSet rs = DB.getQuery(qry);
        while (rs.next()) {
            elements=rs.getInt("tot");//NOI18N
        }
        if (elements==0){return;}   //No data to plot
        //calculating x axis date range
        qry="SELECT min(Date) As mindate, max(Date) as maxdate FROM Measures WHERE AqID ='"// NOI18N
                + Global.AqID +"' "+  Util.getPeriod() + ";";// NOI18N
        DB.openConn();
        rs = DB.getQuery(qry);
        while (rs.next()) {
            minDate=LocUtil.localizeAsDate(rs.getString("mindate"));//NOI18N
            maxDate=LocUtil.localizeAsDate(rs.getString("maxdate"));//NOI18N
        }
        if (minDate==null){//if there is an empty date
            qry="SELECT Date FROM Measures WHERE AqID ='"// NOI18N
                + Global.AqID +"' "+  Util.getPeriod() + " ORDER BY Date DESC;";// NOI18N
            rs = DB.getQuery(qry);
            while (rs.next()) {
               String tmpDate=rs.getString("Date");//NOI18N
               if (!tmpDate.isEmpty()){
                   minDate=LocUtil.localizeAsDate(tmpDate);
               }
            }
            if (minDate==null){//seems no valid date
                minDate=LocUtil.localizeAsDate("2000-01-01");//NOI18N use first day of millenium
            }
        }
        for (int serie=0; serie < tot_series; serie++){            
            datas [serie]=new double [2][];
            datas [serie][x]=new double [elements];
            datas [serie][y]=new double[elements];
            qry="SELECT "+ caption[serie]+",Date FROM Measures WHERE AqID ='"+ // NOI18N
                    Global.AqID +"' "+  Util.getPeriod() + " ORDER BY Date, Time;";// NOI18N
            DB.openConn();
            rs = DB.getQuery(qry);
            int count=0;
            int ticx=0;
            while (rs.next()) {
                /*The value of reading is stored as string.
                 * if the string is empty this should not 
                 * be considered as a zero reading so it's skipped
                 * otherwise:
                 */
                if (rs.getString(caption[serie])!=null){
                    if (!rs.getString(caption[serie]).isEmpty()){
                        double yValue=rs.getDouble(caption[serie]);//y value
                        if (yValue > bigNum){bigNum=yValue;} //store a the biggest value
                        datas [serie][y][count]=yValue;                
                        //datas [serie][x][count]=ticx;
                        datas [serie][x][count]=Util.DateDiff(
                                LocUtil.localizeAsDate(rs.getString("Date")),//NOI18N
                                minDate);
                        count++;
                        ticx++;
                    }  else {
                        ticx++;
                    } 
                }else {
                    ticx++;
                } 
                
            }//next element
        }//next serie
            
        //xmap 
        //mapping only 10 points
       
                
        jccKitIface jki=new jccKitIface();
        //Calculating and rounding xscale to best value
        double xscale=Util.DateDiff(maxDate, minDate);    //store the scale in days        
        //int roundFactor=Util.integerPower(10, (int) Math.floor(Math.log10(xscale))); //calculates the base 10 msb        
       // xscale=Math.floor((xscale/roundFactor)+1)*roundFactor;
        //INT((A2+10)/10)*10
        xscale=Math.floor((xscale+10)/10)*10;
        jki.setXMax(xscale);
        jki.setYMax(bigNum);
        jki.setGrid(gridCheckBox.isSelected());  //set grid 
        //Legend        
        boolean setLegend=true;
        if (keyNoRadioButton.isSelected()){
            setLegend=false;
        } else if (keyBoxRadioButton.isSelected()){
            setLegend=true;
        }
        String legendCaption;
        legendCaption=LocUtil.localizeDate(LocUtil.delocalizeDate(minDate)) + "-";
        legendCaption=legendCaption+LocUtil.localizeDate(LocUtil.delocalizeDate(maxDate));
        jki.setLegend(setLegend,legendCaption);
        //Axis labels
        jki.setXLabel(java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("DAYS"));
        jki.setYLabel(java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("plot.values"));        
        //Grid step 
        double mytics = Integer.valueOf(gridstepSpinner.getValue().toString());
        jki.setGridStep(mytics);
        //add series
        GraphicsPlotCanvas pc=jki.createLinesPlotCanvas(tot_series);                
        DataPlot datasPlot = new DataPlot();
        
        //custom labels:
        for (int i=0; i < caption.length; i++) {
            caption[i] = LocUtil.getCustomCaption(caption[i]);
        }
        
        jki.doLinesGraph(datasPlot, datas, caption) ;
        //call plotwin
        PlotWin pw= new PlotWin(pc);
        pc.connect(datasPlot);
        pw.setVisible(true);
        pw.setAlwaysOnTop(true);
    }
    
    /**
     * plot data to files ancd call gnuplot
     * 
     * @throws IOException
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private void ExecPlot() throws IOException, ClassNotFoundException, SQLException{
         String plotmacroFileName = Global.WorkDir +Application.FS+ "plot_macro.m";// NOI18N
         String dataFileName = Global.WorkDir +Application.FS+ "plot_values.dat";// NOI18N

        //creates files
        //data file
        boolean success = (new File(dataFileName)).exists();
        if (success){
            success=(new File(dataFileName)).delete();
        }
        try {
            success = (new File(dataFileName)).createNewFile();
        } catch (IOException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
        if (success!=true){
            JOptionPane.showMessageDialog (null,
                      java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CAN_T_CREATE_THE_MACRO_FILE") + dataFileName,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),
                JOptionPane.ERROR_MESSAGE);
              return;
        }
        try (PrintWriter outdat = new PrintWriter(new FileWriter(dataFileName))) {
            String qry="SELECT id, Date, NO2, NO3, GH, KH, PH, temp, NH, FE,CO2,"+// NOI18N
                    "Cond,CA,MG,CU,PO4,O2,dens,NH3,iodine, salinity FROM Measures WHERE AqID ='"+ Global.AqID +// NOI18N
                    "'ORDER BY Date, Time;";// NOI18N
            DB.openConn();
            ResultSet rs = DB.getQuery(qry);
            while (rs.next()) {
                outdat.println(
                        noNull(rs.getString("id")) + "\t" + // NOI18N
                        noNull(rs.getString("Date")) + "\t" + // NOI18N
                        noNull(rs.getString("NO2")) + "\t" + // NOI18N
                        noNull(rs.getString("NO3")) + "\t" +// NOI18N
                        noNull(rs.getString("GH")) + "\t" + // NOI18N
                        noNull(rs.getString("KH")) + "\t" + // NOI18N
                        noNull(rs.getString("PH")) + "\t" + // NOI18N
                        noNull(rs.getString("temp")) + "\t" + // NOI18N
                        noNull(rs.getString("CO2")) + "\t" + // NOI18N
                        noNull(rs.getString("NH")) + "\t" + // NOI18N
                        noNull(rs.getString("FE")) + "\t" + // NOI18N
                        noNull(rs.getString("Cond")) + "\t" + // NOI18N
                        noNull(rs.getString("CA")) + "\t" + // NOI18N
                        noNull(rs.getString("MG")) + "\t" + // NOI18N
                        noNull(rs.getString("CU")) + "\t" + // NOI18N
                        noNull(rs.getString("PO4")) + "\t" + // NOI18N
                        noNull(rs.getString("O2")) + "\t" + // NOI18N
                        noNull(rs.getString("dens")) + "\t" + // NOI18N
                        noNull(rs.getString("NH3")) + "\t" + // NOI18N
                        noNull(rs.getString("iodine")) + "\t" +// NOI18N
                        noNull(rs.getString("salinity"))
                        );// NOI18N
            }
            DB.closeConn();        
            outdat.flush();
        }

        //macro file
        success = (new File(plotmacroFileName)).exists();
        if (success){
            success=(new File(plotmacroFileName)).delete();
        }
        try {
            success = (new File(plotmacroFileName)).createNewFile();
        } catch (IOException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
        if (success!=true){
            JOptionPane.showMessageDialog (null,
                      java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CAN_T_CREATE_THE_MACRO_FILE") + plotmacroFileName,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),
                JOptionPane.ERROR_MESSAGE);
              return;
        }

        PrintWriter out= new PrintWriter(new FileWriter(plotmacroFileName));

        //out header
        if (outPngRadioButton.isSelected()){
            out.println("set terminal png");// NOI18N
            out.println("set output 'Plotted.png'");// NOI18N
        }
        if (outPsRadioButton.isSelected()){
            out.println("set terminal postscript");// NOI18N
            out.println("set output 'Plotted.ps'");// NOI18N
        }
        out.println("set title '"+java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("AQUARIUM_MEASURES")+"'");
        if (gridCheckBox.isSelected()){
            out.println("set grid");// NOI18N
        }
        if (keyNoRadioButton.isSelected()){
            out.println("set key off");// NOI18N
        } else if (keyBoxRadioButton.isSelected()){
            out.println("set key on box");// NOI18N
        }
        out.println("set ytics " + gridstepSpinner.getValue());// NOI18N
        out.println("set xlabel 'Date'");// NOI18N
        out.println("set xdata time");// NOI18N
        out.println("set timefmt '%Y-%m-%d'");// NOI18N
        out.println(" plot \\");// NOI18N
        
        if (NO2CheckBox.isSelected()) {             //NO2
            if ( NO3CheckBox.isSelected() || NHCheckBox.isSelected() ||
                    KHCheckBox.isSelected() || GHCheckBox.isSelected() ||
                    PHCheckBox.isSelected() || FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:3 title 'NO2' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:3 title 'NO2' with lines");// NOI18N
            }
        }

        if (NO3CheckBox.isSelected()) {             //NO3
            if ( NHCheckBox.isSelected() ||
                    KHCheckBox.isSelected() || GHCheckBox.isSelected() ||
                    PHCheckBox.isSelected() || FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:4 title 'NO3' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:4 title 'NO3' with lines");// NOI18N
            }
        }
        
        if (GHCheckBox.isSelected()) {             //dGH
            if ( NHCheckBox.isSelected() ||  KHCheckBox.isSelected() ||
                    PHCheckBox.isSelected() || FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:5 title 'dGH' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:5 title 'dGH' with lines");// NOI18N
            }
        }

        if (KHCheckBox.isSelected()) {             //dKH
            if ( NHCheckBox.isSelected() ||
                    PHCheckBox.isSelected() || FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:6 title '" +  LocUtil.getCustomCaption("KH") +// NOI18N
                        "' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:6 title '" +  LocUtil.getCustomCaption("KH") +// NOI18N
                        "' with lines");// NOI18N
            }
        }

        if (PHCheckBox.isSelected()) {             //dPH
            if ( NHCheckBox.isSelected() || FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:7 title 'dPH' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:7 title 'dPH' with lines");// NOI18N
            }
        }

        if (NHCheckBox.isSelected()) {             //NH
            if ( FECheckBox.isSelected() ||
                    tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:10 title 'NH' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:10 title 'NH' with lines");// NOI18N
            }
        }

        if (FECheckBox.isSelected()) {             //FE
            if ( tempCheckBox.isSelected() || CO2CheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:11 title 'FE' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:11 title 'FE' with lines");// NOI18N
            }
        }

        if (CO2CheckBox.isSelected()) {             //CO2
            if ( tempCheckBox.isSelected() ||
                    condCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:9 title 'CO2' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:9 title 'CO2' with lines");// NOI18N
            }
        }

        if (condCheckBox.isSelected()) {             //Cond
            if ( tempCheckBox.isSelected() || CACheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:12 title '" +  LocUtil.getCustomCaption("COND") +// NOI18N
                        "' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:12 title '" +  LocUtil.getCustomCaption("COND") +// NOI18N
                        "' with lines");// NOI18N
            }
        }

        if (CACheckBox.isSelected()) {             //Ca
            if ( tempCheckBox.isSelected() ||
                    MGCheckBox.isSelected() || CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:13 title 'Ca' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:13 title 'Ca' with lines");// NOI18N
            }
        }

        if (MGCheckBox.isSelected()) {             //Mg
            if ( tempCheckBox.isSelected() ||  CUCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:14 title 'Mg' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:14 title 'Mg' with lines");// NOI18N
            }
        }

        if (CUCheckBox.isSelected()) {             //Cu
            if ( tempCheckBox.isSelected()|| 
                    PO4CheckBox.isSelected() ||O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:15 title 'Cu' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:15 title 'Cu' with lines");// NOI18N
            }
        }
        
        if (PO4CheckBox.isSelected()) {             //PO4
            if ( tempCheckBox.isSelected()|| O2CheckBox.isSelected() || 
                    densCheckBox.isSelected() || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:16 title 'PO4' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:16 title 'PO4' with lines");// NOI18N
            }
        }
        
        if (O2CheckBox.isSelected()) {             //O2
            if ( tempCheckBox.isSelected()||densCheckBox.isSelected()
                     || NH3CheckBox.isSelected() || 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:17 title 'O2' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:17 title 'O2' with lines");// NOI18N
            }
        }
        if (densCheckBox.isSelected()) {             //dens
            if ( tempCheckBox.isSelected() || NH3CheckBox.isSelected()|| 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:18 title '" +  LocUtil.getCustomCaption("DENS") +// NOI18N
                        "' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:18 title '" +  LocUtil.getCustomCaption("DENS") +// NOI18N
                        "' with lines");// NOI18N
            }
        }
         if (NH3CheckBox.isSelected()) {             //NH3
            if ( tempCheckBox.isSelected()|| 
                    I2CheckBox.isSelected()  || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:19 title 'NH3' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:19 title 'NH3' with lines");// NOI18N
            }
        } 
        
        if (I2CheckBox.isSelected()) {             //I2
            if (tempCheckBox.isSelected() || NaCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:20 title 'I2' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:20 title 'I2' with lines");// NOI18N
            }
        }
        if (NaCheckBox.isSelected()) { //Na+
                if ( tempCheckBox.isSelected()) {
                out.println(" '" + dataFileName// NOI18N
                        + "' using 2:21 title '" +  LocUtil.getCustomCaption("Salinity") +// NOI18N
                        "' with lines,\\");// NOI18N
            } else {
                out.println(" '" + dataFileName// NOI18N
                + "' using 2:21 title '" +  LocUtil.getCustomCaption("Salinity") +// NOI18N
                        "' with lines");// NOI18N
            }
        }
        
               
        if (tempCheckBox.isSelected()) {             //temp
            out.println(" '" + dataFileName// NOI18N
                        + "' using 2:8 title '" +  LocUtil.getCustomCaption("TEMP") +// NOI18N
                        "' with lines");// NOI18N

        }
        

        out.println();
        out.flush();
        out.close();

        Util.PlotDocument(plotmacroFileName);
    }
    
    private String noNull (String value) {
        if (value == null) {
            return "";
        }
        else {
            return value;
        }
    }

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CACheckBox;
    private javax.swing.JCheckBox CO2CheckBox;
    private javax.swing.JCheckBox CUCheckBox;
    private javax.swing.JCheckBox FECheckBox;
    private javax.swing.JCheckBox GHCheckBox;
    private javax.swing.JCheckBox I2CheckBox;
    private javax.swing.JCheckBox KHCheckBox;
    private javax.swing.JCheckBox MGCheckBox;
    private javax.swing.JCheckBox NH3CheckBox;
    private javax.swing.JCheckBox NHCheckBox;
    private javax.swing.JCheckBox NO2CheckBox;
    private javax.swing.JCheckBox NO3CheckBox;
    private javax.swing.JCheckBox NaCheckBox;
    private javax.swing.JCheckBox O2CheckBox;
    private javax.swing.JCheckBox PHCheckBox;
    private javax.swing.JCheckBox PO4CheckBox;
    private javax.swing.JButton SaveButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox condCheckBox;
    private javax.swing.JComboBox configComboBox;
    private javax.swing.JButton deleteConfigButton;
    private javax.swing.JCheckBox densCheckBox;
    private javax.swing.JCheckBox gridCheckBox;
    private javax.swing.JSpinner gridstepSpinner;
    private javax.swing.JRadioButton keyBoxRadioButton;
    private javax.swing.JRadioButton keyNoRadioButton;
    private javax.swing.JRadioButton keyRadioButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JRadioButton outPngRadioButton;
    private javax.swing.JRadioButton outPsRadioButton;
    private javax.swing.JRadioButton outVideoRadioButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JCheckBox tempCheckBox;
    private javax.swing.JPanel valuesPanel;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    private void LoadSettings(String reqConfiguration) 
            throws ClassNotFoundException, SQLException {
        
        Setting s=Setting.getInstance();        
        
        String configuration= s.getPlConfiguration();
        if (reqConfiguration != null && !reqConfiguration.isEmpty()) {
            configuration = reqConfiguration;
        }
        configComboBox.setSelectedItem(configuration);
        if (configuration.equalsIgnoreCase("---")) {
            configuration = null; //default configuraton
        }        

        //default output
        String setVal =s.getPl_Output(configuration);
        if (setVal.matches("video")){// NOI18N
            outVideoRadioButton.setSelected(true);
        } else if (setVal.matches("png")){// NOI18N
            outPngRadioButton.setSelected(true);
        } else if (setVal.matches("ps")){// NOI18N
            outPsRadioButton.setSelected(true);
        }

        //default grid setting
        gridCheckBox.setSelected(s.getPl_Grid(configuration));

        //default values settings
        NO2CheckBox.setSelected(s.getPl_NO2(configuration));
        NO3CheckBox.setSelected(s.getPl_NO3(configuration));
        NHCheckBox.setSelected(s.getPl_NH(configuration));
        NH3CheckBox.setSelected(s.getPl_NH3(configuration));
        KHCheckBox.setSelected(s.getPl_KH(configuration));
        GHCheckBox.setSelected(s.getPl_GH(configuration));
        PHCheckBox.setSelected(s.getPl_PH(configuration));
        FECheckBox.setSelected(s.getPl_FE(configuration));
        tempCheckBox.setSelected(s.getPl_Temp(configuration));
        CO2CheckBox.setSelected(s.getPl_CO2(configuration));
        condCheckBox.setSelected(s.getPl_Cond(configuration));
        CACheckBox.setSelected(s.getPl_CA(configuration));
        MGCheckBox.setSelected(s.getPl_MG(configuration));
        CUCheckBox.setSelected(s.getPl_CU(configuration));
        PO4CheckBox.setSelected(s.getPl_PO4(configuration));
        O2CheckBox.setSelected(s.getPl_O2(configuration));
        densCheckBox.setSelected(s.getPl_DENS(configuration));
        I2CheckBox.setSelected(s.getPl_I2(configuration));
        NaCheckBox.setSelected(s.getPl_NA(configuration));

        //key
        setVal = s.getPl_Key(configuration);
        if (setVal.matches("K")){// NOI18N
            keyRadioButton.setSelected(true);
        } else if (setVal.matches("B")){// NOI18N
            keyBoxRadioButton.setSelected(true);
        } else if (setVal.matches("N")){// NOI18N
            keyNoRadioButton.setSelected(true);
        }

        //steps
        gridstepSpinner.setValue( s.getPl_Gridstep(configuration));
        
        if (!s.getUsegnuplot()) { //gnuplot use is not requested
            keyBoxRadioButton.setEnabled(false);
            outPngRadioButton.setEnabled(false);
            outPsRadioButton.setEnabled(false);
        }
        
        //custom labels start here
        String cl1=s.getDensCustomLabel();
        if (!cl1.isEmpty()) {
            densCheckBox.setText(cl1);
        }
        String cl2=s.getCondCustomLabel();
        if (!cl2.isEmpty()) {
            condCheckBox.setText(cl2);
        }
        String cl3=s.getKHCustomLabel();
        if (!cl3.isEmpty()) {
            KHCheckBox.setText(cl3);
        }
        String cl4=s.getTempCustomLabel();
        if (!cl4.isEmpty()) {
            tempCheckBox.setText(cl4);
        }
        String cl5=s.getSalinityCustomLabel();
        if (!cl5.isEmpty()) {
            NaCheckBox.setText(cl5);
        }
    }
        
    private static void populateCombo (JComboBox DisplayCombo) {
        
        Setting s=Setting.getInstance();
        
        String[] configurations = s.getPlConfigurations();  
        
        DisplayCombo.removeAllItems();
        DisplayCombo.addItem("---");//NOI18N
        
        if (configurations == null) {
            return;
        }
        
        int totElements= configurations.length;
        
        for (int x=0; x< totElements; x++) {
            if (!configurations[x].equalsIgnoreCase("---")) {
                DisplayCombo.addItem(configurations[x]);
            }
        }  
        
        DisplayCombo.setSelectedIndex(0);
    }
    
    static final Logger _log = Logger.getLogger(Plotting.class.getName());
}
