/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2010 Rudi Giacomini Pilon *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package nyagua;

import dispatching.Watched;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 *
 * @author rgi
 */
public class BaseImportSelector extends javax.swing.JDialog {    

    /**
     * Creates new form 
     * @param parent    parent window
     * @param modal     true=modal mode; false=non modal mode;
     * @param headerMap Headers import map
     * @param records   Reccords to import
     * @param imageMap  images map
     * @param tablename table to import
     */
    public BaseImportSelector(
            java.awt.Frame parent, boolean modal, 
            Map<String, Integer> headerMap, List <String> records,
            Map<Integer,BufferedImage> imageMap, String tablename) {
        super(parent, modal);
        initComponents();
        _headers = headerMap;
        _recordsList = records;
        _images = imageMap;
        _tablename = tablename;
        _displayRecords(headerMap, records, imageMap);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        queryButtonGroup = new javax.swing.ButtonGroup();
        searchLabel = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        rowsPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        errLabel = new javax.swing.JLabel();
        selAllRadioButton = new javax.swing.JRadioButton();
        selNoneRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        setTitle(bundle.getString("FBCONNECTOR")); // NOI18N
        setName(bundle.getString("BASEIMPORT")); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        searchLabel.setText(bundle.getString("BASE_IMPORT_CHOSE")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 10);
        getContentPane().add(searchLabel, gridBagConstraints);

        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/import.png"))); // NOI18N
        importButton.setText(bundle.getString("Import")); // NOI18N
        importButton.setActionCommand(bundle.getString("Import")); // NOI18N
        importButton.setSelected(true);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        getContentPane().add(importButton, gridBagConstraints);

        rowsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        rowsPanel.setAlignmentY(0.0F);
        rowsPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        rowsPanel.setLayout(new javax.swing.BoxLayout(rowsPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(rowsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 700;
        gridBagConstraints.ipady = 400;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit_16.png"))); // NOI18N
        closeButton.setText(bundle.getString("CANCEL")); // NOI18N
        closeButton.setDefaultCapable(false);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        getContentPane().add(closeButton, gridBagConstraints);

        errLabel.setForeground(new java.awt.Color(255, 51, 51));
        errLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(errLabel, gridBagConstraints);

        queryButtonGroup.add(selAllRadioButton);
        selAllRadioButton.setSelected(true);
        selAllRadioButton.setText(bundle.getString("Select_all")); // NOI18N
        selAllRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selAllRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(selAllRadioButton, gridBagConstraints);

        queryButtonGroup.add(selNoneRadioButton);
        selNoneRadioButton.setText(bundle.getString("Select_none")); // NOI18N
        selNoneRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selNoneRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(selNoneRadioButton, gridBagConstraints);

        setSize(new java.awt.Dimension(751, 649));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   	


    /**
     * Import action
     * 
     * @param evt 
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        Component[] rows = rowsPanel.getComponents();
        AppUtil.startWaitCursor(rootPane);
        for (Component row : rows) {
            if (row.getClass() == BaseImportRow.class) {
                BaseImportRow biRow = (BaseImportRow) row;
                if (biRow.isSelected()) {
                    String id = biRow.getId();
                    
                    String record = _getRecordById(id);
                    BufferedImage img = _images.get(Integer.parseInt(id));
                    
                    if (_tablename.equalsIgnoreCase(ExpImp.FISH_TABLE)) {
                        ExpImp.importFishFromRecord(_headers, record, img);
                    }
                    else if (_tablename.equalsIgnoreCase(ExpImp.INV_TABLE)) {
                        ExpImp.importInvertsFromRecord(_headers, record, img);
                    }
                    else if (_tablename.equalsIgnoreCase(ExpImp.PLANTS_TABLE)) {
                        ExpImp.importPlantsFromRecord(_headers, record, img);
                    }
                }
            }
        }
        Watched nyMessages=Watched.getInstance();
        nyMessages.Update(Watched.REQUEST_POPULATE_FBTABLE);
        nyMessages.Update(Watched.REQUEST_POPULATE_IBTABLE);
        nyMessages.Update(Watched.REQUEST_POPULATE_PBTABLE);
        AppUtil.stopWaitCursor(rootPane);
        
        // Close
        setVisible(false);
        dispose();

    }//GEN-LAST:event_importButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // Close
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void selAllRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selAllRadioButtonActionPerformed
        Component[] rows = rowsPanel.getComponents();
        for (Component row : rows) {
            if (row.getClass() == BaseImportRow.class) {
                BaseImportRow biRow = (BaseImportRow) row;
                biRow.select();
            }
        }
    }//GEN-LAST:event_selAllRadioButtonActionPerformed

    private void selNoneRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selNoneRadioButtonActionPerformed
       Component[] rows = rowsPanel.getComponents();
        for (Component row : rows) {
            if (row.getClass() == BaseImportRow.class) {
                BaseImportRow biRow = (BaseImportRow) row;
                biRow.unselect();
            }
        }
    }//GEN-LAST:event_selNoneRadioButtonActionPerformed
       
    private String _getRecordById (String id) {
        for (String record: _recordsList) {
            String [] currentRecord = record.split(Pattern.quote(DB.FIELD_SEP));
            int fieldn = _headers.get(ID);
            if (currentRecord[fieldn].equalsIgnoreCase(id)) {
                return record;
            }
        }
        return null;
    }
    
    private void _displayRecords (
            Map<String, Integer> headerMap, List <String> records,
            Map<Integer,BufferedImage> imageMap){
        for (String record : records) {
            String [] currentRecord = record.split(Pattern.quote(DB.FIELD_SEP));
            int fieldn = headerMap.get(ID);
            String id = currentRecord[fieldn];
            fieldn = headerMap.get(NAME);
            String name = currentRecord[fieldn];
            BufferedImage img = imageMap.get(Integer.parseInt(id));
//            System.err.println("Id:[" + id +"], name: [" + name +"]");
            
            //build rows
            BaseImportRow iRow = new BaseImportRow();
            iRow.setNameLabel(id + " - " + name);
            if (img != null) {
                iRow.setImage(img);
            }
            iRow.setID(id);
            iRow.setAlignmentY(LEFT_ALIGNMENT);
            GridBagConstraints gridBagConstraints = 
                    new java.awt.GridBagConstraints();
            add(iRow, gridBagConstraints);            
            gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;

        rowsPanel.add(iRow);
            
        }
        rowsPanel.revalidate();
        rowsPanel.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup queryButtonGroup;
    private javax.swing.JPanel rowsPanel;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JRadioButton selAllRadioButton;
    private javax.swing.JRadioButton selNoneRadioButton;
    // End of variables declaration//GEN-END:variables
    
    private final String ID="id";
    private final String NAME = "Name";
    
    private final Map<String, Integer> _headers;
    private final List <String> _recordsList;
    private final Map<Integer,BufferedImage> _images;
    private final String _tablename;
    
    static final Logger _log = Logger.getLogger(BaseImportSelector.class.getName());

}
