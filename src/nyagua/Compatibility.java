/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2011 Rudi Giacomini Pilon *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package nyagua;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import jcckit.GraphicsPlotCanvas;
import jcckit.data.DataPlot;
import nyagua.data.Reading;
import nyagua.data.Setting;

/**
 * Compatibility options form
 * 
 * @author Rudi Giacomini Pilon
 * @version 1.3
 */
public class Compatibility extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    /** Value of id selected in calling window passed as parameter */
    public static int selId = 0;

    /** Creates new form Plotting
     * @param parent parent frame
     * @param modal true = modal dialog || false = non modal
     */
    public Compatibility(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateCombo(configComboBox);
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        valuesPanel = new javax.swing.JPanel();
        GHCheckBox = new javax.swing.JCheckBox();
        PHCheckBox = new javax.swing.JCheckBox();
        tempCheckBox = new javax.swing.JCheckBox();
        selectedRadioButton = new javax.swing.JRadioButton();
        lastRadioButton = new javax.swing.JRadioButton();
        mediumRadioButton = new javax.swing.JRadioButton();
        optionsPanel = new javax.swing.JPanel();
        gridCheckBox = new javax.swing.JCheckBox();
        keyRadioButton = new javax.swing.JRadioButton();
        keyBoxRadioButton = new javax.swing.JRadioButton();
        keyNoRadioButton = new javax.swing.JRadioButton();
        gridstepSpinner = new javax.swing.JSpinner();
        outputPanel = new javax.swing.JPanel();
        outVideoRadioButton = new javax.swing.JRadioButton();
        outPngRadioButton = new javax.swing.JRadioButton();
        outPsRadioButton = new javax.swing.JRadioButton();
        SaveButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        fishRadioButton = new javax.swing.JRadioButton();
        plantsRadioButton = new javax.swing.JRadioButton();
        invertsRadioButton = new javax.swing.JRadioButton();
        configComboBox = new javax.swing.JComboBox();
        deleteConfigButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ok_16x.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        okButton.setText(bundle.getString("OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        cancelButton.setText(bundle.getString("CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cancelButton, gridBagConstraints);

        valuesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("plot.values"))); // NOI18N

        GHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        GHCheckBox.setText(bundle.getString("GH")); // NOI18N

        PHCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        PHCheckBox.setText(bundle.getString("PH")); // NOI18N

        tempCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        tempCheckBox.setText(bundle.getString("TEMP")); // NOI18N

        buttonGroup3.add(selectedRadioButton);
        selectedRadioButton.setText(bundle.getString("SELECTED")); // NOI18N
        selectedRadioButton.setEnabled(false);

        buttonGroup3.add(lastRadioButton);
        lastRadioButton.setSelected(true);
        lastRadioButton.setText(bundle.getString("LAST")); // NOI18N

        buttonGroup3.add(mediumRadioButton);
        mediumRadioButton.setText(bundle.getString("MEDIUM")); // NOI18N

        javax.swing.GroupLayout valuesPanelLayout = new javax.swing.GroupLayout(valuesPanel);
        valuesPanel.setLayout(valuesPanelLayout);
        valuesPanelLayout.setHorizontalGroup(
            valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GHCheckBox)
                    .addComponent(PHCheckBox)
                    .addComponent(tempCheckBox)
                    .addComponent(selectedRadioButton)
                    .addComponent(lastRadioButton)
                    .addComponent(mediumRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        valuesPanelLayout.setVerticalGroup(
            valuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(valuesPanelLayout.createSequentialGroup()
                .addComponent(GHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PHCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tempCheckBox)
                .addGap(18, 18, 18)
                .addComponent(selectedRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mediumRadioButton))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(valuesPanel, gridBagConstraints);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Options"))); // NOI18N

        gridCheckBox.setText(bundle.getString("GRID")); // NOI18N
        gridCheckBox.setToolTipText(bundle.getString("ENABLE/DISABLE_GRID")); // NOI18N

        buttonGroup1.add(keyRadioButton);
        keyRadioButton.setText(bundle.getString("KEY")); // NOI18N

        buttonGroup1.add(keyBoxRadioButton);
        keyBoxRadioButton.setText(bundle.getString("BOXED_KEY")); // NOI18N

        buttonGroup1.add(keyNoRadioButton);
        keyNoRadioButton.setText(bundle.getString("NO_KEY")); // NOI18N

        gridstepSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"0.1", "0.2", "0.25", "0.5", "1", "1.5", "2", "0.5", "1", "2"}));
        gridstepSpinner.setToolTipText(bundle.getString("GRID_SPACING")); // NOI18N

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(gridCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridstepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyRadioButton)
                    .addComponent(keyBoxRadioButton)
                    .addComponent(keyNoRadioButton))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridCheckBox)
                    .addComponent(gridstepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyBoxRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keyNoRadioButton)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(optionsPanel, gridBagConstraints);

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("plot.output"))); // NOI18N

        buttonGroup2.add(outVideoRadioButton);
        outVideoRadioButton.setText(bundle.getString("VIDEO")); // NOI18N

        buttonGroup2.add(outPngRadioButton);
        outPngRadioButton.setText(bundle.getString("PNG")); // NOI18N

        buttonGroup2.add(outPsRadioButton);
        outPsRadioButton.setText(bundle.getString("POSTSCRIPT")); // NOI18N

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outVideoRadioButton)
                    .addComponent(outPngRadioButton)
                    .addComponent(outPsRadioButton))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addComponent(outVideoRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outPngRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outPsRadioButton)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 49;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(outputPanel, gridBagConstraints);

        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        SaveButton.setText(bundle.getString("SAVE")); // NOI18N
        SaveButton.setToolTipText(bundle.getString("SAVE_CURRENT_SETTINGS")); // NOI18N
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 41;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(SaveButton, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("plot.checkfor"))); // NOI18N

        buttonGroup4.add(fishRadioButton);
        fishRadioButton.setSelected(true);
        fishRadioButton.setText(bundle.getString("FISH")); // NOI18N

        buttonGroup4.add(plantsRadioButton);
        plantsRadioButton.setText(bundle.getString("PLANTS")); // NOI18N

        buttonGroup4.add(invertsRadioButton);
        invertsRadioButton.setText(bundle.getString("INVERTS_")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fishRadioButton)
                    .addComponent(invertsRadioButton)
                    .addComponent(plantsRadioButton))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(fishRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invertsRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plantsRadioButton)
                .addGap(17, 17, 17))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        configComboBox.setEditable(true);
        configComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));
        configComboBox.setToolTipText(bundle.getString("ENTER_CONFIG")); // NOI18N
        configComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 2, 10);
        getContentPane().add(configComboBox, gridBagConstraints);

        deleteConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        deleteConfigButton.setToolTipText(bundle.getString("DELETE_CONFIG")); // NOI18N
        deleteConfigButton.setMaximumSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.setMinimumSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.setPreferredSize(new java.awt.Dimension(20, 20));
        deleteConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteConfigButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 6, 2, 5);
        getContentPane().add(deleteConfigButton, gridBagConstraints);

        setSize(new java.awt.Dimension(399, 425));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ok button
     * 
     * @param evt 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Setting s=Setting.getInstance();
        if (s.getUsegnuplot()) { //gnuplot use is requested
            try {
                this.ExecPlot();
            } catch (    IOException | ClassNotFoundException | SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        } else {    //use jccKit library
            try {
                this.DoPlot();
            } catch (    ClassNotFoundException | SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Cancel button
     * 
     * @param evt 
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /** Load default settings */
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            LoadSettings(null);
        } catch (ClassNotFoundException | SQLException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private static void populateCombo (JComboBox DisplayCombo) {
        
        Setting s=Setting.getInstance();
        
        String[] configurations = s.getCompConfigurations();  
        
        DisplayCombo.removeAllItems();
        DisplayCombo.addItem("---");//NOI18N
        
        if (configurations == null) {
            return;
        }
        
        int totElements= configurations.length;
        
        for (int x=0; x< totElements; x++) {
            if (!configurations[x].equalsIgnoreCase("---")) {
                DisplayCombo.addItem(configurations[x]);
            }
        }  
        
        DisplayCombo.setSelectedIndex(0);
    }
    
    /**
     * Save current values as default settings
     *
     * @param evt
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
      saveConfiguration();        
    }                                          

    private void saveConfiguration() {
        Setting s=Setting.getInstance();
        
        String configuration =  configComboBox.getSelectedItem().toString(); 

        String[] configurations;

        //check for new configuration
        int elements = configComboBox.getItemCount();
        if (elements > 0) {
            boolean newConfig=true;
            //check if configuration exists
            for (int x=0; x < elements; x++) {                
                if (configuration.equalsIgnoreCase(configComboBox.getItemAt(x).toString())) {
                    newConfig=false;
                }
            }
            if (newConfig) {
                configComboBox.addItem(configComboBox.getSelectedItem());
                elements++;
            }

            configurations = new String [elements];
            for (int x=0; x < elements; x++) {                
                configurations [x] = configComboBox.getItemAt(x).toString();
            }
        }
        else { //only this configuration
            configurations = new String [1];
            configurations[0]= configuration;
        }

        s.setCompConfiguration(configuration);
        s.setCompConfigurations(configurations);

        s.setComp_KH(GHCheckBox.isSelected(),configuration);
        s.setComp_PH(PHCheckBox.isSelected(),configuration);
        s.setComp_Temp(tempCheckBox.isSelected(),configuration);
        s.setComp_Grid(gridCheckBox.isSelected(),configuration);

        if (keyRadioButton.isSelected()){
            s.setComp_Key("K",configuration);// NOI18N
        } else if (keyBoxRadioButton.isSelected()){
            s.setComp_Key("B",configuration);// NOI18N
        } else if (keyNoRadioButton.isSelected()){
            s.setComp_Key("N",configuration);// NOI18N
        }

        if (outVideoRadioButton.isSelected()){
            s.setCompOutput("video",configuration);// NOI18N
        } else if (outPngRadioButton.isSelected()){
            s.setCompOutput("png",configuration);// NOI18N
        } else if (outPsRadioButton.isSelected()){
            s.setCompOutput("ps",configuration);// NOI18N
        }

        if (lastRadioButton.isSelected()){
            s.setCompValue("last",configuration);// NOI18N
        }else if (mediumRadioButton.isSelected()){
            s.setCompValue("medium",configuration);// NOI18N
        }else {
            s.setCompValue("selected",configuration);// NOI18N
        }
        
        if (fishRadioButton.isSelected()) {
            s.setCompSubj("fish",configuration);// NOI18N
        } else if (invertsRadioButton.isSelected()) {
            s.setCompSubj("inverts",configuration);// NOI18N
        } else {    
            s.setCompSubj("plants",configuration);// NOI18N
        }
        s.setComp_Gridstep(gridstepSpinner.getValue().toString(),configuration);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void configComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configComboBoxActionPerformed
        // Change configuration
        if (configComboBox.getSelectedItem() != null) {
            try {
                LoadSettings(configComboBox.getSelectedItem().toString());
            } catch (ClassNotFoundException | SQLException ex) {
                _log.log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_configComboBoxActionPerformed

    private void deleteConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteConfigButtonActionPerformed
        //delete configuration
        int index = configComboBox.getSelectedIndex();
        if (index > 0) {
            String configName = configComboBox.getSelectedItem().toString();
            int a = JOptionPane.showConfirmDialog(null,
                java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("DO_YOU_REALLY_WANT_TO_DELETE") + configName,
                java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("WARNING"), JOptionPane.YES_NO_OPTION);
            if (a == JOptionPane.YES_OPTION) {
                configComboBox.removeItemAt(index);
                saveConfiguration();
                configComboBox.setSelectedIndex(0);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CANT_DELETE_DEFAULT"),
                java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("INFORMATION"), JOptionPane.OK_OPTION);

        }
    }//GEN-LAST:event_deleteConfigButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    /**
     * Plot data using jccKit internal library
     */
    private void DoPlot() throws ClassNotFoundException, SQLException{
        //Get values for lines in error bar
        String PH;
        String GH;
        String temp;
        int count=0;
        if (lastRadioButton.isSelected()){ //last recorded value is used
            int lastId=DB.DBLastIdInAquarium("Measures");// NOI18N
            Reading measure;
            measure=Reading.getById(lastId);
            PH=LocUtil.delocalizeDouble(measure.getPh());
            GH=LocUtil.delocalizeDouble(measure.getGh());
            temp=LocUtil.delocalizeDouble(measure.getTemp());
            
        } else if (mediumRadioButton.isSelected()){ //medium value is used            
            PH = Double.toString(Report.getMedia("PH"));// NOI18N
            GH = Double.toString(Report.getMedia("GH"));// NOI18N
            temp = Double.toString(Report.getMedia("temp"));// NOI18N
            
        } else {    //current selected value
            Reading r;
            r=Reading.getById(selId);
            PH=LocUtil.delocalizeDouble(r.getPh());
            GH=LocUtil.delocalizeDouble(r.getGh());
            temp=LocUtil.delocalizeDouble(r.getTemp());
        }  
        //end of lines values
        
        //dinamize series
        //captions should be dinamic        
        
        int tot_series=0;    //total number of series      
        String capt[]=new String[3];         
         String[] fields=new String[3];     //fields_names
         if (PHCheckBox.isSelected()) { 
             capt[tot_series]=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("PH");
             fields[tot_series]="PH";//NOI18N
             tot_series++;
         }
         if (GHCheckBox.isSelected()) {
             capt[tot_series]=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("GH");
             fields[tot_series]="DH";//NOI18N
             tot_series++;
         }
         if (tempCheckBox.isSelected()) { 
             capt[tot_series]=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("TEMP");
             fields[tot_series]="t_";//NOI18N
             tot_series++;
         }
        
        if (tot_series == 0){return;}//no selection no action to do => exit
        capt=java.util.Arrays.copyOf(capt, tot_series);     //captions
        
        //Extracting data--> dimensions are: 
        //[serieid] [media or bar] [x|y axis] [point value]
        //serieid is 1 to 3 (PH-KH-temp)
        //media is line value - bar is single specimen data
        //y value is ever the counter value (specimen id)
        // in x axis are the data
        //dimensions are: 
        //[serieid] [media or bar] [x|y axis] [point value]   
         
        double[][][][] data = new double [tot_series][][][];        
        int x=0;    //x axis data are at 0
        int y=1;    //y axis data are at 1
        int med=0;
        int bar=1;
        int line=2;
        double bigNum=0;
        String [] yMap= new String[1];
        yMap[0]="";
       
        for (int serie=0; serie<tot_series; serie++){
            //for each ph/kh/temp
            data [serie]=new double [3][][];    //med,bar,line
            String table;
            String nameField;
            if (fishRadioButton.isSelected()){    
                table = "FishBase";// NOI18N
                //nameField="CommonName";//NOI18N
            } else if (invertsRadioButton.isSelected()){
                table = "InvBase";// NOI18N
                //nameField="CommonName";//NOI18N
            } else {
                table = "PlantsBase";// NOI18N                
            }          
            nameField="Name";//NOI18N
                String qry="SELECT count(*) AS tot  FROM " + table + ";";// NOI18N
                DB.openConn();
                ResultSet rs = DB.getQuery(qry);            
                int elementcount=rs.getInt("tot")+1; //reserving space for 1 element more than data
                                                     //to shifth than 0 point in  x axis 
                count=0;
                DB.closeConn();
                qry="SELECT PHMin, PHMax, DHMin, DHMax, t_Min, t_Max,"+ nameField +// NOI18N
                    " FROM " + table + ";";// NOI18N
                DB.openConn();
                rs = DB.getQuery(qry);
                yMap = java.util.Arrays.copyOf(yMap, elementcount); 
                data [serie][med] =new double [2][]; //x,y
                data [serie][med][x]=new double[elementcount];
                data [serie][med][y]=new double [elementcount];
                data [serie][bar] =new double [2][]; //x,y
                data [serie][bar][x]=new double[elementcount];
                data [serie][bar][y]=new double [elementcount];                
                while (rs.next()) { 
                    count++;
                    double xMax=rs.getDouble(fields[serie] + "Max");// NOI18N
                    double xMin=rs.getDouble(fields[serie] + "Min");// NOI18N
                    if (xMax>bigNum){bigNum=xMax;}
                    data [serie][bar][x][count]=(xMax-xMin)/2;                    
                    data [serie][bar][y][count]=0;  
                    data [serie][med][x][count]=(xMax+xMin)/2;                    
                    double yVal=0.1;
                    if (serie==1) {yVal=0.3;}
                    if (serie==2) {yVal=-0.5;}
                    data [serie][med][y][count]=count+yVal; 
                    
                    yMap[count]=rs.getString(nameField);// NOI18N
                }
                DB.closeConn();
                data [serie][line] =new double [2][]; //x,y
                data [serie][line][x]=new double[elementcount];
                data [serie][line][y]=new double [elementcount];             
                double lineValue=0;
                if (fields[serie].matches("PH")){// NOI18N
                    if (!PH.equalsIgnoreCase("")) {
                        lineValue=Double.valueOf(PH);
                    }else{
                        lineValue=0;
                    }
                }else if (fields[serie].matches("DH")){// NOI18N
                    if (!GH.equalsIgnoreCase("")) {
                        lineValue=Double.valueOf(GH);
                    }else{
                        lineValue=0;
                    }
                }else if (fields[serie].matches("t_")){// NOI18N
                    if (!temp.equalsIgnoreCase("")) {
                        lineValue=Double.valueOf(temp);
                    }else{
                        lineValue=0;
                    }
                }
                for (int i=0;i<elementcount;i++){
                    data [serie][line][x][i]=lineValue;
                    data [serie][line][y][i]=i+1;
                }   
            //}
        }    //end for
        
        
        //Setting jccKit interface--->
        jccKitIface jki=new jccKitIface();
        jki.setGrid(gridCheckBox.isSelected());  //set grid      
        String title=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("SPECIES_-_PH_/_DH_/TEMP__COMPATIBILITY");
        boolean setLegend=true;
        if (keyNoRadioButton.isSelected()){
            setLegend=false;
        } else if (keyBoxRadioButton.isSelected()){
            setLegend=true;
        }
        jki.setLegend(setLegend,title);
        //change axis labels
        String xlabel=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("PH_RANGE");
        String x2label=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("DH/TEMP_RANGE");
        String ylabel=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("SPECIE");        
        jki.setXLabel(xlabel + " "+x2label);
        jki.setYLabel(ylabel);
        
        //set Axis Max Values
        bigNum++;
        jki.setXMax(bigNum);
        jki.setYMax(count+2);
        
       jki.setYmap(yMap);
        
        //Grid step 
        double mytics = Integer.valueOf(gridstepSpinner.getValue().toString());
        jki.setGridStep(mytics);      
        
        //add series
        GraphicsPlotCanvas pc=jki.createBarsPlotCanvas(tot_series);
        DataPlot dataPlot = new DataPlot();
        
         
        //custom labels:
        for (int i=0; i < capt.length; i++) {
            capt[i] = LocUtil.getCustomCaption(capt[i]);
        }
        
        
        jki.doBarsGraph(dataPlot, data, capt) ;
       
        //call plotwin
        PlotWin pw= new PlotWin(pc);
        pc.connect(dataPlot);
        pw.setVisible(true);         
        pw.setAlwaysOnTop(true);
    }
            

    /**
     * plot data to files ancd call gnuplot
     * 
     * @throws IOException
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private void ExecPlot() throws IOException, ClassNotFoundException, SQLException{
        String plotmacroFileName = Global.WorkDir +Application.FS+ "comp_macro.m";// NOI18N
        String dataFileName = Global.WorkDir +Application.FS+ "comp_values.dat";// NOI18N
        String PH="";// NOI18N
        String GH="";// NOI18N
        String temp="";// NOI18N
        int count=0;
        //creates files
        //data file
        boolean success = (new File(dataFileName)).exists();
        if (success){
            success=(new File(dataFileName)).delete();
        }
        try {
            success = (new File(dataFileName)).createNewFile();
        } catch (IOException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
        if (success!=true){
            JOptionPane.showMessageDialog (null,
                      java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CAN_T_CREATE_THE_MACRO_FILE") + dataFileName,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),
                JOptionPane.ERROR_MESSAGE);
              return;
        }
                  
        if (lastRadioButton.isSelected()){ //last recorded value is used
            int lastId=DB.DBLastIdInAquarium("Measures");// NOI18N
            Reading measure;
            measure=Reading.getById(lastId);
            PH=LocUtil.delocalizeDouble(measure.getPh());
            GH=LocUtil.delocalizeDouble(measure.getGh());
            temp=LocUtil.delocalizeDouble(measure.getTemp());
            
        } else if (mediumRadioButton.isSelected()){ //medium value is used
            String qry="SELECT  avg(GH) AS GH, avg(PH) AS PH, avg(temp) AS temp" +// NOI18N
                "  FROM Measures  WHERE AqID ='"// NOI18N
                + Global.AqID +"' "+  Util.getPeriod() + ";";// NOI18N
             DB.openConn();
             ResultSet rs = DB.getQuery(qry);
             while (rs.next()) {
                PH = LocUtil.delocalizeDouble(rs.getString("PH"));// NOI18N
                GH = LocUtil.delocalizeDouble(rs.getString("GH"));// NOI18N
                temp = LocUtil.delocalizeDouble(rs.getString("temp"));// NOI18N
            }
            DB.closeConn();
        } else {    //current selected value
            Reading r;
            r=Reading.getById(selId);
            PH=LocUtil.delocalizeDouble(r.getPh());
            GH=LocUtil.delocalizeDouble(r.getGh());
            temp=LocUtil.delocalizeDouble(r.getTemp());
        }
        
        if (PH.equalsIgnoreCase("")) {
            PH="0";
        }
        if (GH.equalsIgnoreCase("")) {
            GH="0";
        }
        if (temp.equalsIgnoreCase("")) {
            temp="0";
        }
        try (PrintWriter outdat = new PrintWriter(new FileWriter(dataFileName))) {
            if (fishRadioButton.isSelected()){            
                String table = "FishBase";// NOI18N
                String qry="SELECT PHMin, PHMax, DHMin, DHMax, t_Min, t_Max, Name" +// NOI18N
                    " FROM " + table + ";";// NOI18N
                DB.openConn();
                ResultSet rs = DB.getQuery(qry);
                while (rs.next()) {   
                    count++;
                    outdat.println(String.valueOf(count)+"\t"+rs.getString("PHMin")+"\t"+// NOI18N
                            rs.getString("PHMax")+"\t"+PH+"\t"+// NOI18N
                            rs.getString("DHMin")+"\t"+rs.getString("DHMax")+"\t"+// NOI18N
                            GH+"\t"+rs.getString("t_Min")+"\t"+// NOI18N
                            rs.getString("t_Max")+"\t"+temp+"\t\""+// NOI18N
                            rs.getString("Name")+"\"");// NOI18N
                }
            }
            if (invertsRadioButton.isSelected()){            
                String table = "InvBase";// NOI18N
                String qry="SELECT PHMin, PHMax, DHMin, DHMax, t_Min, t_Max, Name" +// NOI18N
                    " FROM " + table + ";";// NOI18N
                DB.openConn();
                ResultSet rs = DB.getQuery(qry);
                while (rs.next()) {   
                    count++;
                    outdat.println(String.valueOf(count)+"\t"+rs.getString("PHMin")+"\t"+// NOI18N
                            rs.getString("PHMax")+"\t"+PH+"\t"+// NOI18N
                            rs.getString("DHMin")+"\t"+rs.getString("DHMax")+"\t"+// NOI18N
                            GH+"\t"+rs.getString("t_Min")+"\t"+// NOI18N
                            rs.getString("t_Max")+"\t"+temp+"\t\""+// NOI18N
                            rs.getString("Name")+"\"");// NOI18N
                }
            }
            if (plantsRadioButton.isSelected()){
                String table = "PlantsBase";// NOI18N
                String qry="SELECT PHMin, PHMax, DHMin, DHMax, t_Min, t_Max, Name" +// NOI18N
                    " FROM " + table + ";";// NOI18N
                DB.openConn();
                ResultSet rs = DB.getQuery(qry);
                while (rs.next()) {  
                    count++;
                    outdat.println(String.valueOf(count)+"\t"+rs.getString("PHMin")+"\t"+// NOI18N
                            rs.getString("PHMax")+"\t"+PH+"\t"+// NOI18N
                            rs.getString("DHMin")+"\t"+rs.getString("DHMax")+"\t"+// NOI18N
                            GH+"\t"+rs.getString("t_Min")+"\t"+// NOI18N
                            rs.getString("t_Max")+"\t"+temp+"\t\""+// NOI18N
                            rs.getString("Name")+"\"");// NOI18N
                }
            }
            DB.closeConn();        
            
            outdat.flush();
        }

        //macro file
        success = (new File(plotmacroFileName)).exists();
        if (success){
            success=(new File(plotmacroFileName)).delete();
        }
        try {
            success = (new File(plotmacroFileName)).createNewFile();
        } catch (IOException ex) {
            _log.log(Level.SEVERE, null, ex);
        }
        if (success!=true){
            JOptionPane.showMessageDialog (null,
                      java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("CAN_T_CREATE_THE_MACRO_FILE") + plotmacroFileName,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),
                JOptionPane.ERROR_MESSAGE);
              return;
        }
        try (PrintWriter out = new PrintWriter(new FileWriter(plotmacroFileName))) {
            if (outPngRadioButton.isSelected()){
                out.println("set terminal png");// NOI18N
                out.println("set output 'Plotted.png'");// NOI18N
            }
            if (outPsRadioButton.isSelected()){
                out.println("set terminal postscript");// NOI18N
                out.println("set output 'Plotted.ps'");// NOI18N
            }
            String title=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("SPECIES_-_PH_/_DH_/TEMP__COMPATIBILITY");
            out.println("set title '"+ title + "'");// NOI18N
            if (gridCheckBox.isSelected()){
                out.println("set grid");// NOI18N
            }
            if (keyNoRadioButton.isSelected()){
                out.println("set key off");// NOI18N
            } else if (keyBoxRadioButton.isSelected()){
                out.println("set key on box");// NOI18N
            }
            
            out.println("set ytics " + gridstepSpinner.getValue());// NOI18N
            double mytics = Integer.valueOf(gridstepSpinner.getValue().toString());
            mytics=mytics/2;
            out.println("set mytics " + String.valueOf(mytics));// NOI18N
            out.println("set xtics 1 nomirror");// NOI18N
            out.println("set mxtics");// NOI18N
            out.println("set x2tics 5");// NOI18N
            out.println("set mx2tics");// NOI18N
            String xlabel=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("PH_RANGE");
            String x2label=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("DH/TEMP_RANGE");
            String ylabel=java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("SPECIE");
            out.println("set xlabel '"+ xlabel +"'");// NOI18N
            out.println("set x2label '"+ x2label +"'");// NOI18N
            out.println("set ylabel '"+ ylabel +"'");// NOI18N

            out.println("set yrange [0:"+ String.valueOf(count+1) +"]");// NOI18N
            out.println("set xrange [1:14]");// NOI18N
            out.println(" plot \\");// NOI18N
            
                    if (PHCheckBox.isSelected()) {             //dKH
                if ( GHCheckBox.isSelected() || tempCheckBox.isSelected()){
                    out.println(" '" + dataFileName
                            + "' using 4:1:2:3 axes x1y1 with xerrorlines title 'PH',\\");// NOI18N
                } else {
                    out.println(" '" + dataFileName
                            + "' using 4:1:2:3:yticlabel(11) axes x1y1 with xerrorlines title 'PH'");// NOI18N
                }
            }

            if (GHCheckBox.isSelected()) {             //dPH
                if ( tempCheckBox.isSelected() ){
                    out.println(" '" + dataFileName // NOI18N
                            + "' using 7:($1+0.1):5:6 axes x2y1 with xerrorlines title 'GH',\\");// NOI18N
                } else {
                    out.println(" '" + dataFileName // NOI18N
                            + "' using 7:($1+0.2):5:6:yticlabel(11) axes x2y1 with xerrorlines title 'GH'");// NOI18N
                }
            }

            if (tempCheckBox.isSelected()) {             //temp
                out.println(" '" + dataFileName // NOI18N
                            + "' using 10:($1+0.2):8:9:yticlabel(11) axes x2y1 with xerrorlines title 'temp'");// NOI18N

            }


            out.println();
            out.flush();
        }

        Util.PlotDocument(plotmacroFileName);
    }

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox GHCheckBox;
    private javax.swing.JCheckBox PHCheckBox;
    private javax.swing.JButton SaveButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox configComboBox;
    private javax.swing.JButton deleteConfigButton;
    private javax.swing.JRadioButton fishRadioButton;
    private javax.swing.JCheckBox gridCheckBox;
    private javax.swing.JSpinner gridstepSpinner;
    private javax.swing.JRadioButton invertsRadioButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton keyBoxRadioButton;
    private javax.swing.JRadioButton keyNoRadioButton;
    private javax.swing.JRadioButton keyRadioButton;
    private javax.swing.JRadioButton lastRadioButton;
    private javax.swing.JRadioButton mediumRadioButton;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JRadioButton outPngRadioButton;
    private javax.swing.JRadioButton outPsRadioButton;
    private javax.swing.JRadioButton outVideoRadioButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JRadioButton plantsRadioButton;
    private javax.swing.JRadioButton selectedRadioButton;
    private javax.swing.JCheckBox tempCheckBox;
    private javax.swing.JPanel valuesPanel;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    /**
     * Loads default settings
     * 
     * @throws ClassNotFoundException
     * @throws SQLException 
     */
    private void LoadSettings(String reqConfiguration) throws ClassNotFoundException, SQLException {
         String setVal;
        Setting s=Setting.getInstance();       
        
        String configuration= s.getCompConfiguration();
        if (reqConfiguration != null && !reqConfiguration.isEmpty()) {
            configuration = reqConfiguration;
        }
        configComboBox.setSelectedItem(configuration);
        if (configuration.equalsIgnoreCase("---")) {
            configuration = null; //default configuraton
        }   

        //default output
        setVal =s.getCompOutput(configuration);
        if (setVal.matches("video")){// NOI18N
            outVideoRadioButton.setSelected(true);
        } else if (setVal.matches("png")){// NOI18N
            outPngRadioButton.setSelected(true);
        } else if (setVal.matches("ps")){// NOI18N
            outPsRadioButton.setSelected(true);
        }

        if (selId !=0){
            selectedRadioButton.setEnabled(true);
        } else {
            selectedRadioButton.setEnabled(false);
        }

        setVal =s.getCompValue(configuration);
        if (setVal.matches("last")){// NOI18N
            lastRadioButton.setSelected(true);
        } else if (setVal.matches("selected")){// NOI18N
            selectedRadioButton.setSelected(true);
        } else if (setVal.matches("medium")){// NOI18N
            mediumRadioButton.setSelected(true);
        }




        setVal =s.getCompSubj(configuration);
        if (setVal.matches("both")){// NOI18N
            fishRadioButton.setSelected(true);
            plantsRadioButton.setSelected(true);
            invertsRadioButton.setSelected(true);
        } else if (setVal.matches("fish")){// NOI18N
            fishRadioButton.setSelected(true);
        } else if (setVal.matches("plants")){// NOI18N
            plantsRadioButton.setSelected(true);
        }else if (setVal.matches("inverts")){// NOI18N
            invertsRadioButton.setSelected(true);
        }

        //default grid setting
        gridCheckBox.setSelected(s.getComp_Grid(configuration));

        //default values settings
        GHCheckBox.setSelected(s.getComp_KH(configuration));
        PHCheckBox.setSelected(s.getComp_PH(configuration));
        tempCheckBox.setSelected(s.getComp_Temp(configuration));

        

        //key
        setVal = s.getComp_Key(configuration);
        if (setVal.matches("K")){// NOI18N
            keyRadioButton.setSelected(true);
        } else if (setVal.matches("B")){// NOI18N
            keyBoxRadioButton.setSelected(true);
        } else if (setVal.matches("N")){// NOI18N
            keyNoRadioButton.setSelected(true);
        }

        //steps
        gridstepSpinner.setValue( s.getComp_Gridstep(configuration));
        
        if (!s.getUsegnuplot()) { //gnuplot use is not requested
            keyBoxRadioButton.setEnabled(false);
            outPngRadioButton.setEnabled(false);
            outPsRadioButton.setEnabled(false);
        }
        
        //custom label
        String cl4=s.getTempCustomLabel();
        if (!cl4.isEmpty()) {
            tempCheckBox.setText(cl4);
        }
        
    }
    
    static final Logger _log = Logger.getLogger(Compatibility.class.getName());
}
