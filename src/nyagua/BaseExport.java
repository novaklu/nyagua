/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2010 Rudi Giacomini Pilon *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package nyagua;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Database Selection form
 * 
 * @author Rudi Giacomini Pilon
 * @version 1.0
 */
public class BaseExport extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    /** status for window */
    private boolean status=false;
    


    /** Creates new form DBSelector
     * 
     * @param parent
     * @param modal 
     *      
     */
    public BaseExport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();  
        createFullFileName();
        
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }
    
    public String getFullFileName() {
        return pathTextField.getText();
    }
    
    public boolean isFishSelected() {
        return fishCheckBox.isSelected();
    }
    
    public boolean isInvertebratesSelected() {
        return invertsCheckBox.isSelected();
    }
    public boolean isPlantsSelected() {
        return plantsCheckBox.isSelected();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        messagePanel = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        pathTextField = new javax.swing.JTextField();
        pathSelectButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        fishCheckBox = new javax.swing.JCheckBox();
        plantsCheckBox = new javax.swing.JCheckBox();
        invertsCheckBox = new javax.swing.JCheckBox();

        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        containerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wiz4.png"))); // NOI18N
        imageLabel.setMaximumSize(new java.awt.Dimension(150, 240));

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        cancelButton.setText(bundle.getString("CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ok_16x.png"))); // NOI18N
        okButton.setText(bundle.getString("OK")); // NOI18N
        okButton.setEnabled(false);
        okButton.setSelected(true);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));

        messageLabel.setText(bundle.getString("export.msg")); // NOI18N

        pathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathTextFieldActionPerformed(evt);
            }
        });
        pathTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pathTextFieldPropertyChange(evt);
            }
        });

        pathSelectButton.setText(bundle.getString("dot_dot_dot")); // NOI18N
        pathSelectButton.setMinimumSize(new java.awt.Dimension(46, 19));
        pathSelectButton.setPreferredSize(new java.awt.Dimension(46, 19));
        pathSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathSelectButtonActionPerformed(evt);
            }
        });

        pathLabel.setText(bundle.getString("PATH")); // NOI18N

        fishCheckBox.setText(bundle.getString("FISH")); // NOI18N
        fishCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fishCheckBoxActionPerformed(evt);
            }
        });

        plantsCheckBox.setText(bundle.getString("PLANTS")); // NOI18N
        plantsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plantsCheckBoxActionPerformed(evt);
            }
        });

        invertsCheckBox.setText(bundle.getString("INVERTS_")); // NOI18N
        invertsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout messagePanelLayout = new javax.swing.GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                    .addGroup(messagePanelLayout.createSequentialGroup()
                        .addGroup(messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invertsCheckBox)
                            .addGroup(messagePanelLayout.createSequentialGroup()
                                .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pathSelectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pathLabel)
                            .addComponent(fishCheckBox)
                            .addComponent(plantsCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fishCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invertsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plantsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathSelectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(containerPanelLayout.createSequentialGroup()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(messagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        setSize(new java.awt.Dimension(559, 381));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        int selected = 0;
        if (fishCheckBox.isSelected()) selected++;
        if (invertsCheckBox.isSelected()) selected++;
        if (plantsCheckBox.isSelected()) selected++;
        
        if (selected > 0) {
            //set selection
            if (Util.checkFileExistence(getFullFileName())) {
                //ask for overwrite
                
                int a = JOptionPane.showConfirmDialog(null,
                        java.util.ResourceBundle.getBundle(
                                "nyagua/Bundle").getString(
                                        "DO_YOU_REALLY_WANT_OVERWRITE") + " /n"
                                + getFullFileName(),
                        java.util.ResourceBundle.getBundle(
                                "nyagua/Bundle").getString("WARNING"), 
                        JOptionPane.YES_NO_OPTION);
                
                if ( a== JOptionPane.NO_OPTION){                
                    return;
                }                
            }            
            
            status = true;
            doClose(RET_OK);           

        } 
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * create a valid default file name adding one to name if file exist
     */
    private void createFullFileName() {
        String fullFileName;
        String defaultName= "Nyagua_export";
        String workdir = Global.WorkDir;
        if (workdir != null) {
            if (!workdir.endsWith(Application.FS)) {
                workdir = workdir + Application.FS;
            }
        }
        fullFileName = workdir + defaultName + ".zip";
        int x=0;
        while (Util.checkFileExistence(fullFileName)) {
            x++;
            fullFileName = workdir + defaultName +
                    "_" + String.valueOf(x) + ".zip";
            
        }
         pathTextField.setText(fullFileName);
    }
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void pathSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathSelectButtonActionPerformed
        //Select Filename or path
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jfc.setCurrentDirectory(new File (pathTextField.getText().substring(0,
                pathTextField.getText().lastIndexOf(Application.FS))));
//        }        
        int result = jfc.showOpenDialog(null);
        if (result==JFileChooser.APPROVE_OPTION ) {
            pathTextField.setText((jfc.getSelectedFile().getAbsolutePath()));
        } 
    }//GEN-LAST:event_pathSelectButtonActionPerformed

    private void fishCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fishCheckBoxActionPerformed
        _evaluateSelection();
    }//GEN-LAST:event_fishCheckBoxActionPerformed

    private void invertsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertsCheckBoxActionPerformed
        _evaluateSelection();
    }//GEN-LAST:event_invertsCheckBoxActionPerformed

    private void plantsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plantsCheckBoxActionPerformed
        _evaluateSelection();
    }//GEN-LAST:event_plantsCheckBoxActionPerformed

    private void pathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathTextFieldActionPerformed
        _evaluateSelection();
    }//GEN-LAST:event_pathTextFieldActionPerformed

    private void pathTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pathTextFieldPropertyChange
        _evaluateSelection();
    }//GEN-LAST:event_pathTextFieldPropertyChange

    /**
     * enable ok button when at least one checkbox 
     * has been chose and there is any file name
     */
    private void _evaluateSelection() {
        if ((fishCheckBox.isSelected() ||  
                invertsCheckBox.isSelected() ||
                plantsCheckBox.isSelected())
            && !pathTextField.getText().isEmpty() ){
            
            okButton.setEnabled(true);
        }
        else {
            okButton.setEnabled(false);
        }
    }
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                BaseExport dialog = new BaseExport(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JCheckBox fishCheckBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JCheckBox invertsCheckBox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton pathSelectButton;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JCheckBox plantsCheckBox;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
    
}
