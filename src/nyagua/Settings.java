/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2010 Rudi Giacomini Pilon
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package nyagua;

import components.CssFilter;
import components.ImageFileView;
import components.ImageFilter;
import components.ImagePreview;
import dispatching.Watched;
import java.awt.Color;
import java.io.File;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import nyagua.data.Setting;


/**
 * Settings window
 * 
 * @author Rudi Giacomini Pilon
 * @version 1.0
 */
public class Settings extends javax.swing.JDialog {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    
    /** Creates new form Settings
     * @param parent
     * @param modal  
     */
    public Settings(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        initialWiz();
        
        if (Util.OS_Detect().matches("win")) {//NOI18N
            browserTextField.setEditable(false);
        }
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        themeButtonGroup = new javax.swing.ButtonGroup();
        waterHardnessButtonGroup = new javax.swing.ButtonGroup();
        lenghtButtonGroup = new javax.swing.ButtonGroup();
        tempButtonGroup = new javax.swing.ButtonGroup();
        volumeButtonGroup = new javax.swing.ButtonGroup();
        startFormButtonGroup = new javax.swing.ButtonGroup();
        helpLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        wizPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        welcomeLabel = new javax.swing.JTextArea();
        MainPanel = new javax.swing.JPanel();
        browserLabel = new javax.swing.JLabel();
        browserTextField = new javax.swing.JTextField();
        browserSelectButton = new javax.swing.JButton();
        kwCostLabel = new javax.swing.JLabel();
        kwCostTextField = new javax.swing.JTextField();
        dateFormatLabel = new javax.swing.JLabel();
        dateFormatComboBox = new javax.swing.JComboBox();
        saveWinPosCheckBox = new javax.swing.JCheckBox();
        UnitsPanel = new javax.swing.JPanel();
        degreePanel = new javax.swing.JPanel();
        degreeRadioButton = new javax.swing.JRadioButton();
        ppmRadioButton = new javax.swing.JRadioButton();
        linearPanel = new javax.swing.JPanel();
        cmRadioButton = new javax.swing.JRadioButton();
        inchRadioButton = new javax.swing.JRadioButton();
        tempPanel = new javax.swing.JPanel();
        celsiusRadioButton = new javax.swing.JRadioButton();
        fahrenheitRadioButton = new javax.swing.JRadioButton();
        capacityPanel = new javax.swing.JPanel();
        litersRadioButton = new javax.swing.JRadioButton();
        usgalRadioButton = new javax.swing.JRadioButton();
        enableInFormsCheckBox = new javax.swing.JCheckBox();
        enableInReportsCheckBox = new javax.swing.JCheckBox();
        unitsHintLabel = new javax.swing.JLabel();
        fishbasePanel = new javax.swing.JPanel();
        fishbaseHostLabel = new javax.swing.JLabel();
        fishbaseHostComboBox = new javax.swing.JComboBox();
        fishbaseTimeoutLabel = new javax.swing.JLabel();
        fishbaseTimeoutSpinner = new javax.swing.JSpinner();
        ReportsPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        logoTextField = new javax.swing.JTextField();
        logoSelectButton = new javax.swing.JButton();
        titleColorLabel = new javax.swing.JLabel();
        titleColorTextField = new javax.swing.JTextField();
        titleColorButton = new javax.swing.JButton();
        gnuplotCheckBox = new javax.swing.JCheckBox();
        utf8CheckBox = new javax.swing.JCheckBox();
        footerLabel = new javax.swing.JLabel();
        footerTextField = new javax.swing.JTextField();
        cssLabel = new javax.swing.JLabel();
        cssTextField = new javax.swing.JTextField();
        cssButton = new javax.swing.JButton();
        chartSizeLabel = new javax.swing.JLabel();
        chartSizeXTextField = new javax.swing.JTextField();
        chartSizeYTextField = new javax.swing.JTextField();
        xLabel = new javax.swing.JLabel();
        generateAllCheckBox = new javax.swing.JCheckBox();
        incExpCheckBox = new javax.swing.JCheckBox();
        themesPanel = new javax.swing.JPanel();
        themeStdRadioButton = new javax.swing.JRadioButton();
        themeShadRadioButton = new javax.swing.JRadioButton();
        prevLabel = new javax.swing.JLabel();
        themeGreenRadioButton = new javax.swing.JRadioButton();
        themeElegantRadioButton = new javax.swing.JRadioButton();
        schedulerPanel = new javax.swing.JPanel();
        askStartupPanelCheckBox = new javax.swing.JCheckBox();
        aquariumSFRadioButton = new javax.swing.JRadioButton();
        schedulerSFRadioButton = new javax.swing.JRadioButton();
        schedulerEnabledCheckBox = new javax.swing.JCheckBox();
        presetsPanel = new javax.swing.JPanel();
        expensesPresetsCheckBox = new javax.swing.JCheckBox();
        maintenancePresetsCheckBox = new javax.swing.JCheckBox();
        customLabelsPanel = new javax.swing.JPanel();
        customLabel1 = new javax.swing.JLabel();
        clTextField1 = new javax.swing.JTextField();
        customLabel2 = new javax.swing.JLabel();
        clTextField2 = new javax.swing.JTextField();
        customLabel3 = new javax.swing.JLabel();
        clTextField3 = new javax.swing.JTextField();
        customLabel4 = new javax.swing.JLabel();
        clTextField4 = new javax.swing.JTextField();
        customLabel5 = new javax.swing.JLabel();
        clTextField5 = new javax.swing.JTextField();
        customLabel = new javax.swing.JLabel();
        customLabelb = new javax.swing.JLabel();
        clTextField1u = new javax.swing.JTextField();
        clTextField2u = new javax.swing.JTextField();
        clTextField5u = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        helpLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        helpLabel.setText(bundle.getString("PREFERENCES")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 3, 5);
        getContentPane().add(helpLabel, gridBagConstraints);

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ok_16x.png"))); // NOI18N
        okButton.setText(bundle.getString("OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 3, 11, 3);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_16x.png"))); // NOI18N
        cancelButton.setText(bundle.getString("CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        getContentPane().add(cancelButton, gridBagConstraints);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/recycle.png"))); // NOI18N
        resetButton.setText(bundle.getString("RESET")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 15);
        getContentPane().add(resetButton, gridBagConstraints);

        jTabbedPane1.setToolTipText("");

        wizPanel.setAlignmentX(0.0F);
        wizPanel.setAlignmentY(0.0F);
        wizPanel.setMinimumSize(new java.awt.Dimension(200, 200));

        jScrollPane1.setBorder(null);

        welcomeLabel.setEditable(false);
        welcomeLabel.setBackground(new java.awt.Color(238, 238, 238));
        welcomeLabel.setColumns(20);
        welcomeLabel.setLineWrap(true);
        welcomeLabel.setRows(5);
        welcomeLabel.setText(bundle.getString("WELCOME2")); // NOI18N
        welcomeLabel.setWrapStyleWord(true);
        welcomeLabel.setBorder(null);
        jScrollPane1.setViewportView(welcomeLabel);

        javax.swing.GroupLayout wizPanelLayout = new javax.swing.GroupLayout(wizPanel);
        wizPanel.setLayout(wizPanelLayout);
        wizPanelLayout.setHorizontalGroup(
            wizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wizPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addContainerGap())
        );
        wizPanelLayout.setVerticalGroup(
            wizPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wizPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        jTabbedPane1.addTab(bundle.getString("Start.here"), wizPanel); // NOI18N

        MainPanel.setLayout(new java.awt.GridBagLayout());

        browserLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        browserLabel.setText(bundle.getString("BROWSER:")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(browserLabel, gridBagConstraints);

        browserTextField.setMinimumSize(new java.awt.Dimension(94, 19));
        browserTextField.setPreferredSize(new java.awt.Dimension(94, 19));
        browserTextField.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(browserTextField, gridBagConstraints);

        browserSelectButton.setText("...");
        browserSelectButton.setMaximumSize(new java.awt.Dimension(33, 20));
        browserSelectButton.setMinimumSize(new java.awt.Dimension(33, 20));
        browserSelectButton.setPreferredSize(new java.awt.Dimension(33, 20));
        browserSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserSelectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        MainPanel.add(browserSelectButton, gridBagConstraints);

        kwCostLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        kwCostLabel.setText(bundle.getString("KW_H_COST_")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(kwCostLabel, gridBagConstraints);

        kwCostTextField.setMinimumSize(new java.awt.Dimension(94, 19));
        kwCostTextField.setPreferredSize(new java.awt.Dimension(94, 19));
        kwCostTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                kwCostTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(kwCostTextField, gridBagConstraints);

        dateFormatLabel.setText(bundle.getString("DATE_FORMAT_")); // NOI18N
        dateFormatLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(dateFormatLabel, gridBagConstraints);

        dateFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dateFormatComboBox.setMinimumSize(new java.awt.Dimension(110, 24));
        dateFormatComboBox.setPreferredSize(new java.awt.Dimension(110, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        MainPanel.add(dateFormatComboBox, gridBagConstraints);

        saveWinPosCheckBox.setText(bundle.getString("SAVE WINDOW POSITION")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        MainPanel.add(saveWinPosCheckBox, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("jTabbedPane1.MainPanel"), MainPanel); // NOI18N

        UnitsPanel.setLayout(new java.awt.GridBagLayout());

        degreePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("water hardness"))); // NOI18N

        waterHardnessButtonGroup.add(degreeRadioButton);
        degreeRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        degreeRadioButton.setSelected(true);
        degreeRadioButton.setText(bundle.getString("degree")); // NOI18N
        degreePanel.add(degreeRadioButton);

        waterHardnessButtonGroup.add(ppmRadioButton);
        ppmRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ppmRadioButton.setText(bundle.getString("ppm")); // NOI18N
        degreePanel.add(ppmRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        UnitsPanel.add(degreePanel, gridBagConstraints);

        linearPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("length"))); // NOI18N

        lenghtButtonGroup.add(cmRadioButton);
        cmRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cmRadioButton.setSelected(true);
        cmRadioButton.setText(bundle.getString("Ny.utilityHCCmRadioButton.text")); // NOI18N
        linearPanel.add(cmRadioButton);

        lenghtButtonGroup.add(inchRadioButton);
        inchRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        inchRadioButton.setText(bundle.getString("Ny.utilityHCInchRadioButton.text")); // NOI18N
        linearPanel.add(inchRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        UnitsPanel.add(linearPanel, gridBagConstraints);

        tempPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TEMP"))); // NOI18N

        tempButtonGroup.add(celsiusRadioButton);
        celsiusRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        celsiusRadioButton.setSelected(true);
        celsiusRadioButton.setText(bundle.getString("_C")); // NOI18N
        celsiusRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                celsiusRadioButtonActionPerformed(evt);
            }
        });
        tempPanel.add(celsiusRadioButton);

        tempButtonGroup.add(fahrenheitRadioButton);
        fahrenheitRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fahrenheitRadioButton.setText(bundle.getString("_F")); // NOI18N
        tempPanel.add(fahrenheitRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        UnitsPanel.add(tempPanel, gridBagConstraints);

        capacityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("volume"))); // NOI18N

        volumeButtonGroup.add(litersRadioButton);
        litersRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        litersRadioButton.setSelected(true);
        litersRadioButton.setText(bundle.getString("solutions.units.liters")); // NOI18N
        capacityPanel.add(litersRadioButton);

        volumeButtonGroup.add(usgalRadioButton);
        usgalRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        usgalRadioButton.setText(bundle.getString("solutions.units.gals")); // NOI18N
        capacityPanel.add(usgalRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        UnitsPanel.add(capacityPanel, gridBagConstraints);

        enableInFormsCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        enableInFormsCheckBox.setText(bundle.getString("settings.use_units")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        UnitsPanel.add(enableInFormsCheckBox, gridBagConstraints);

        enableInReportsCheckBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        enableInReportsCheckBox.setText(bundle.getString("settings.use_units_inreports")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        UnitsPanel.add(enableInReportsCheckBox, gridBagConstraints);

        unitsHintLabel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        unitsHintLabel.setText(bundle.getString("utility.units.hint")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        UnitsPanel.add(unitsHintLabel, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("UNITS"), UnitsPanel); // NOI18N

        fishbasePanel.setLayout(new java.awt.GridBagLayout());

        fishbaseHostLabel.setText(bundle.getString("Select_a_mirror")); // NOI18N
        fishbaseHostLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 3);
        fishbasePanel.add(fishbaseHostLabel, gridBagConstraints);

        fishbaseHostComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "www.fishbase.org", "www.fishbase.us", "www.fishbase.de", "www.fishbase.fr", "www.fishbase.se", "www.fishbase.tw", "www.fishbase.cn", "www.fishbase.sa", "www.fishbase.ca" }));
        fishbaseHostComboBox.setMinimumSize(new java.awt.Dimension(110, 24));
        fishbaseHostComboBox.setPreferredSize(new java.awt.Dimension(110, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 3);
        fishbasePanel.add(fishbaseHostComboBox, gridBagConstraints);

        fishbaseTimeoutLabel.setText(bundle.getString("Connection_timeout")); // NOI18N
        fishbaseTimeoutLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 3);
        fishbasePanel.add(fishbaseTimeoutLabel, gridBagConstraints);

        fishbaseTimeoutSpinner.setModel(new javax.swing.SpinnerNumberModel(30, 0, 120, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 3);
        fishbasePanel.add(fishbaseTimeoutSpinner, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("Fishbase.Settings"), fishbasePanel); // NOI18N

        ReportsPanel.setLayout(new java.awt.GridBagLayout());

        logoLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        logoLabel.setText(bundle.getString("LOGO_")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(logoLabel, gridBagConstraints);

        logoTextField.setText(" ");
        logoTextField.setMinimumSize(new java.awt.Dimension(94, 19));
        logoTextField.setPreferredSize(new java.awt.Dimension(94, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(logoTextField, gridBagConstraints);

        logoSelectButton.setText("...");
        logoSelectButton.setMaximumSize(new java.awt.Dimension(33, 20));
        logoSelectButton.setMinimumSize(new java.awt.Dimension(33, 20));
        logoSelectButton.setPreferredSize(new java.awt.Dimension(33, 20));
        logoSelectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoSelectButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(logoSelectButton, gridBagConstraints);

        titleColorLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        titleColorLabel.setText(bundle.getString("TITLE_COLOR_")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(titleColorLabel, gridBagConstraints);

        titleColorTextField.setEditable(false);
        titleColorTextField.setMinimumSize(new java.awt.Dimension(94, 19));
        titleColorTextField.setPreferredSize(new java.awt.Dimension(94, 19));
        titleColorTextField.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(titleColorTextField, gridBagConstraints);

        titleColorButton.setText("...");
        titleColorButton.setMaximumSize(new java.awt.Dimension(33, 20));
        titleColorButton.setMinimumSize(new java.awt.Dimension(33, 20));
        titleColorButton.setPreferredSize(new java.awt.Dimension(33, 20));
        titleColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                titleColorButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(titleColorButton, gridBagConstraints);

        gnuplotCheckBox.setText(bundle.getString("settings.use.gnuplot")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 3, 5, 3);
        ReportsPanel.add(gnuplotCheckBox, gridBagConstraints);

        utf8CheckBox.setText(bundle.getString("settings.use.utf")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 3, 5, 3);
        ReportsPanel.add(utf8CheckBox, gridBagConstraints);

        footerLabel.setText(bundle.getString("settings.report.footer")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(footerLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(footerTextField, gridBagConstraints);

        cssLabel.setText(bundle.getString("settings.report.css")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(cssLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(cssTextField, gridBagConstraints);

        cssButton.setText("...");
        cssButton.setMaximumSize(new java.awt.Dimension(33, 20));
        cssButton.setMinimumSize(new java.awt.Dimension(33, 20));
        cssButton.setPreferredSize(new java.awt.Dimension(33, 20));
        cssButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cssButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(cssButton, gridBagConstraints);

        chartSizeLabel.setText(bundle.getString("chart_size")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(chartSizeLabel, gridBagConstraints);

        chartSizeXTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chartSizeXTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        ReportsPanel.add(chartSizeXTextField, gridBagConstraints);

        chartSizeYTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chartSizeYTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 20);
        ReportsPanel.add(chartSizeYTextField, gridBagConstraints);

        xLabel.setText(bundle.getString("x")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 15, 2);
        ReportsPanel.add(xLabel, gridBagConstraints);

        generateAllCheckBox.setText(bundle.getString("settings.generate.all")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 3);
        ReportsPanel.add(generateAllCheckBox, gridBagConstraints);

        incExpCheckBox.setText(bundle.getString("settings.include.expenses")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 15, 3);
        ReportsPanel.add(incExpCheckBox, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("jTabbedPane1.ReportsPanel"), ReportsPanel); // NOI18N

        themesPanel.setLayout(new java.awt.GridBagLayout());

        themeButtonGroup.add(themeStdRadioButton);
        themeStdRadioButton.setSelected(true);
        themeStdRadioButton.setText(bundle.getString("STANDARD")); // NOI18N
        themeStdRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeStdRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        themesPanel.add(themeStdRadioButton, gridBagConstraints);

        themeButtonGroup.add(themeShadRadioButton);
        themeShadRadioButton.setText(bundle.getString("SHADOW")); // NOI18N
        themeShadRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeShadRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        themesPanel.add(themeShadRadioButton, gridBagConstraints);

        prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_std_200.png"))); // NOI18N
        prevLabel.setMaximumSize(new java.awt.Dimension(200, 110));
        prevLabel.setMinimumSize(new java.awt.Dimension(200, 110));
        prevLabel.setPreferredSize(new java.awt.Dimension(200, 110));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        themesPanel.add(prevLabel, gridBagConstraints);

        themeButtonGroup.add(themeGreenRadioButton);
        themeGreenRadioButton.setText(bundle.getString("GREEN")); // NOI18N
        themeGreenRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeGreenRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        themesPanel.add(themeGreenRadioButton, gridBagConstraints);

        themeButtonGroup.add(themeElegantRadioButton);
        themeElegantRadioButton.setText(bundle.getString("ELEGANT")); // NOI18N
        themeElegantRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeElegantRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
        themesPanel.add(themeElegantRadioButton, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("jTabbedPane1.themesPanel"), themesPanel); // NOI18N

        schedulerPanel.setLayout(new java.awt.GridBagLayout());

        askStartupPanelCheckBox.setText(bundle.getString("ask_for_default_form")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        schedulerPanel.add(askStartupPanelCheckBox, gridBagConstraints);

        startFormButtonGroup.add(aquariumSFRadioButton);
        aquariumSFRadioButton.setText(bundle.getString("AQUARIUM")); // NOI18N
        aquariumSFRadioButton.setToolTipText(bundle.getString("startup_form")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        schedulerPanel.add(aquariumSFRadioButton, gridBagConstraints);

        startFormButtonGroup.add(schedulerSFRadioButton);
        schedulerSFRadioButton.setText(bundle.getString("Scheduler")); // NOI18N
        schedulerSFRadioButton.setToolTipText(bundle.getString("startup_form")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        schedulerPanel.add(schedulerSFRadioButton, gridBagConstraints);

        schedulerEnabledCheckBox.setText(bundle.getString("Enabled")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        schedulerPanel.add(schedulerEnabledCheckBox, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("Scheduler_Settings"), schedulerPanel); // NOI18N

        presetsPanel.setName(""); // NOI18N

        expensesPresetsCheckBox.setText(bundle.getString("Enable_expenses_presets")); // NOI18N

        maintenancePresetsCheckBox.setText(bundle.getString("Enable_maintenance_presets")); // NOI18N

        javax.swing.GroupLayout presetsPanelLayout = new javax.swing.GroupLayout(presetsPanel);
        presetsPanel.setLayout(presetsPanelLayout);
        presetsPanelLayout.setHorizontalGroup(
            presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(presetsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expensesPresetsCheckBox)
                    .addComponent(maintenancePresetsCheckBox))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        presetsPanelLayout.setVerticalGroup(
            presetsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(presetsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(expensesPresetsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(maintenancePresetsCheckBox)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("Presets"), presetsPanel); // NOI18N

        customLabelsPanel.setName(""); // NOI18N
        customLabelsPanel.setLayout(new java.awt.GridBagLayout());

        customLabel1.setText(bundle.getString("label_for_measures_dens")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        customLabelsPanel.add(customLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 193;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField1, gridBagConstraints);

        customLabel2.setText(bundle.getString("label_for_measures_cond")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        customLabelsPanel.add(customLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 208;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField2, gridBagConstraints);

        customLabel3.setText(bundle.getString("label_for_measures_kh")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        customLabelsPanel.add(customLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 208;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField3, gridBagConstraints);

        customLabel4.setText(bundle.getString("label_for_measures_tmp")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        customLabelsPanel.add(customLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 189;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField4, gridBagConstraints);

        customLabel5.setText(bundle.getString("label_for_measures_salinity")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 30, 0);
        customLabelsPanel.add(customLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 175;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField5, gridBagConstraints);

        customLabel.setText(bundle.getString("set_label")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        customLabelsPanel.add(customLabel, gridBagConstraints);

        customLabelb.setText(bundle.getString("set_units")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        customLabelsPanel.add(customLabelb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField1u, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField2u, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 60;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 3, 0, 12);
        customLabelsPanel.add(clTextField5u, gridBagConstraints);

        jTabbedPane1.addTab(bundle.getString("custom-labels"), customLabelsPanel); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 10, 15);
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/wiz2.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        setSize(new java.awt.Dimension(652, 463));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /** Saves Settings */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        //some checks
        // check if valid data format
        String df =(String) dateFormatComboBox.getSelectedItem();
        if (df ==null || df.matches("") || !LocUtil.validateDateFormat(df)){
            Util.showErrorMsg(java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("WRONG_DATA_FORMAT"));
            dateFormatComboBox.setSelectedItem("MM-dd-yy");// NOI18N
            dateFormatComboBox.requestFocus();
            return;
        }
        Setting s=Setting.getInstance();        
        s.setBrowser(browserTextField.getText());
        s.setKwCost(Double.valueOf(LocUtil.delocalizeDouble( kwCostTextField.getText())));
        s.setDateFormat((String) dateFormatComboBox.getSelectedItem());
        s.setUseUTFFormat(utf8CheckBox.isSelected());
        s.setUsegnuplot(gnuplotCheckBox.isSelected());
        s.setGenerateCompleteReport(generateAllCheckBox.isSelected());
        Global.generateAllReports = generateAllCheckBox.isSelected();
        s.setIncludeExpensesReport(incExpCheckBox.isSelected());
        Global.includeExpensesReport = incExpCheckBox.isSelected();
        s.setSaveWinPosition(saveWinPosCheckBox.isSelected());
        s.setCss(cssTextField.getText());
        s.setLogo(logoTextField.getText());
        s.setFooter(footerTextField.getText());
        s.setTitleColor(titleColorTextField.getText());
        s.setChartWidth(Integer.valueOf(LocUtil.delocalizeDouble(chartSizeXTextField.getText())));
        Global.reportChartWidth=s.getChartWidth();
        s.setChartHeight(Integer.valueOf(LocUtil.delocalizeDouble(chartSizeYTextField.getText())));
        Global.reportChartHeight=s.getChartHeight();
        if (themeStdRadioButton.isSelected()) {
            s.setTheme(Setting.THEME_STANDARD);
        }
        if (themeShadRadioButton.isSelected()) {
            s.setTheme(Setting.THEME_SHADOW);
        }
        if (themeGreenRadioButton.isSelected()) {
            s.setTheme(Setting.THEME_GREEN);
        }
        if (themeElegantRadioButton.isSelected()) {
            s.setTheme(Setting.THEME_ELEGANT);
        }    
        if (degreeRadioButton.isSelected()){
            s.setUnitWHardness("degree");
            Global.khunit="degree";
        }else{
            s.setUnitWHardness("ppm");
            Global.khunit="ppm";
        }
        if (celsiusRadioButton.isSelected()){
            s.setUnitTemp("C");
            Global.temperatureunit="C";
        }else{
            s.setUnitTemp("F");
            Global.temperatureunit="F";
        }
        if (litersRadioButton.isSelected()){
            s.setUnitVolume("l");
            Global.volunit="l";
        }else{
            s.setUnitVolume("usGal");
            Global.volunit="usGal";
        }
        if (cmRadioButton.isSelected()){
            s.setUnitLenght("cm");
            Global.lenghtunit="cm";
        }else{
            s.setUnitLenght("inch");
            s.setUnitLenght("inch");
            Global.lenghtunit="inch";
        }
        if (enableInFormsCheckBox.isSelected()){
            s.setUseUnits(true);
            Global.useUnitsInForms=true;
        }else {
            s.setUseUnits(false);
            Global.useUnitsInForms=false;
        }
         if (enableInReportsCheckBox.isSelected()){
            s.setUseReportUnits(true);
            Global.useUnitsInReports=true;
        }else {
            s.setUseReportUnits(false);
            Global.useUnitsInReports=false;
        }
         //scheduler settings
         s.setAskForDefaultForm(askStartupPanelCheckBox.isSelected());
         if (aquariumSFRadioButton.isSelected()){
             s.setStartupForm(Application.DEFAULT_FORM_AQUARIUM);
         }else{
             s.setStartupForm(Application.DEFAULT_FORM_SCHEDULER);
         }
         s.setSchedulerEnabled(schedulerEnabledCheckBox.isSelected());
         
         //fishbase settings
         s.setTimeout((int) fishbaseTimeoutSpinner.getValue());
         s.setFishbaseSite(fishbaseHostComboBox.getSelectedItem().toString());    
         
         //Presets settings
         s.setEnableExpensesPresetsConfiguration(
            expensesPresetsCheckBox.isSelected());
         
         s.setEnableMaintenancePresetsConfiguration(
            maintenancePresetsCheckBox.isSelected());
         
         //custom labels start here
         s.setDensCustomLabel(notNullValue(clTextField1.getText()));
         s.setDensCustomUnits(notNullValue(clTextField1u.getText()));
         Global.densCustomUnit=notNullValue(clTextField1u.getText());
         s.setCondCustomLabel(notNullValue(clTextField2.getText()));
         s.setCondCustomUnits(notNullValue(clTextField2u.getText()));
         Global.condCustomUnit=notNullValue(clTextField2u.getText());
         s.setKHCustomLabel(notNullValue(clTextField3.getText()));
         s.setTempCustomLabel(notNullValue(clTextField4.getText()));
         s.setSalinityCustomLabel(notNullValue(clTextField5.getText()));
         s.setSalinityCustomUnits(notNullValue(clTextField5u.getText()));
         Global.salinityCustomUnit=notNullValue(clTextField5u.getText());
        
        //Connect to dispacher to notify that settings has been updated
        LocUtil.setDefaultDateFormat(df);
        Global.dateFormat=df;
        Watched nyMessages=Watched.getInstance();
        nyMessages.Update(Watched.CHANGED_UNITS_SETTINGS);
        nyMessages.Update(Watched.CHANGED_PRESETS_SETTINGS);
        
        
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private String notNullValue (String value) {
        if ((value == null) || value.isEmpty()) {
            return "  ";
        }
        return value;
        
    }
    
    /** Closes without saving*/
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /** Selects the default browser */
    private void browserSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserSelectButtonActionPerformed
        //browserFileName="";
        JFileChooser jfc = new JFileChooser();
        int result = jfc.showOpenDialog(null);
        if (result==JFileChooser.APPROVE_OPTION ) {
            String browserFileName = (jfc.getSelectedFile().getAbsolutePath());
            browserTextField.setText(browserFileName);            
        }
    }//GEN-LAST:event_browserSelectButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       /** Load current settings */
        dateFormatComboBox.removeAllItems();
        String [] item=LocUtil.getDateFormats();
        for (String item1 : item) {
            dateFormatComboBox.addItem(item1);
        }
        dateFormatComboBox.setEditable(true);
        Setting s =Setting.getInstance();
        
        //global settings
        browserTextField.setText(s.getBrowser());
        logoTextField.setText(s.getLogo());
        cssTextField.setText(s.getCss());
        footerTextField.setText(s.getFooter());
        titleColorTextField.setText(s.getTitleColor());
        chartSizeXTextField.setText(LocUtil.localizeDouble(String.valueOf(s.getChartWidth())));
        chartSizeYTextField.setText(LocUtil.localizeDouble(String.valueOf(s.getChartHeight())));
        utf8CheckBox.setSelected(s.getUseUTFFormat());
        generateAllCheckBox.setSelected(s.getGenerateCompleteReport());
        incExpCheckBox.setSelected(s.getIncludeExpensesReport());
        gnuplotCheckBox.setSelected(s.getUsegnuplot());
        saveWinPosCheckBox.setSelected(s.getSaveWinPosition());
        kwCostTextField.setText(LocUtil.localizeDouble(String.valueOf(s.getKwCost())));
        //custom labels start here
        clTextField1.setText(s.getDensCustomLabel());
        clTextField1u.setText(s.getDensCustomUnits());
        clTextField2.setText(s.getCondCustomLabel());
        clTextField2u.setText(s.getCondCustomUnits());
        clTextField3.setText(s.getKHCustomLabel());
        clTextField4.setText(s.getTempCustomLabel());
        clTextField5.setText(s.getSalinityCustomLabel());
        clTextField5u.setText(s.getSalinityCustomUnits());
        
        //Report Themes
        String theme = s.getTheme();
        switch (theme) {
            case Setting.THEME_ELEGANT:
                themeElegantRadioButton.setSelected(true);
                prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_eleg_200.png"))); // NOI18N
                break;
            case Setting.THEME_GREEN:
                themeGreenRadioButton.setSelected(true);
                prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_green_200.png"))); // NOI18N
                break;
            case Setting.THEME_SHADOW:
                themeShadRadioButton.setSelected(true);
                prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_shad_200.png")));
                break;
            default:
                themeStdRadioButton.setSelected(true);
                prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_std_200.png"))); // NOI18N
                break;
        }
        
        //locale settings
        dateFormatComboBox.setSelectedItem(s.getDateFormat());
        if (s.getUnitWHardness().matches("degree")){
            degreeRadioButton.setSelected(true);
        }else{
            ppmRadioButton.setSelected(true);
        }
        if (s.getUseUnits()){
            enableInFormsCheckBox.setSelected(true);
        }else{
            enableInFormsCheckBox.setSelected(false);
        }
        if (s.getUseReportUnits()){
            enableInReportsCheckBox.setSelected(true);
        }else{
            enableInReportsCheckBox.setSelected(false);
        }
        if (s.getUnitTemp().matches("C")){
            celsiusRadioButton.setSelected(true);
        }else{
            fahrenheitRadioButton.setSelected(true);
        }
        if (s.getUnitVolume().matches("l")){
            litersRadioButton.setSelected(true);
        }else{
            usgalRadioButton.setSelected(true);
        }
        if (s.getUnitLenght().matches("cm")){
            cmRadioButton.setSelected(true);
        }else{
            inchRadioButton.setSelected(true);
        }
        
        //scheduler settings
        askStartupPanelCheckBox.setSelected(s.getAskForDefaultForm());
        if (s.getStartupForm()==Application.DEFAULT_FORM_AQUARIUM){
            aquariumSFRadioButton.setSelected(true);
        }else{
            schedulerSFRadioButton.setSelected(true);
        }
        if (Global.firstStartup) {          
            schedulerEnabledCheckBox.setSelected(false);
        }
        else {
            schedulerEnabledCheckBox.setSelected(s.isSchedulerEnabled());
        }
        
         //fishbase settings
        fishbaseHostComboBox.setSelectedItem(s.getFishbaseSite());
        fishbaseTimeoutSpinner.setValue(s.getTimeout());
        
        //presets settings
        expensesPresetsCheckBox.setSelected(s.isExpensesPresetsEnabled());
        maintenancePresetsCheckBox.setSelected(s.isMaintenancePresetsEnabled());
        
    }//GEN-LAST:event_formWindowOpened

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // clear settings
        Setting s= Setting.getInstance();
        s.clear();
        this.doClose(returnStatus);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void kwCostTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kwCostTextFieldKeyTyped
        // allow only numbers a related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_kwCostTextFieldKeyTyped

    private void logoSelectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoSelectButtonMouseClicked
        // show a chooser for reports logo
        JFileChooser fc=null;
        if (fc == null) {
            fc = new JFileChooser();

            //Add a custom file filter and disable the default
            //(Accept All) file filter.
            fc.addChoosableFileFilter(new ImageFilter());
            fc.setAcceptAllFileFilterUsed(false);

            //Add custom icons for file types.
            fc.setFileView(new ImageFileView());

            //Add the preview pane.
            fc.setAccessory(new ImagePreview(fc));
        }

        //Show it.
        int returnVal = fc.showDialog(this,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("OK"));

        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            logoTextField.setText(file.getAbsolutePath());
        }
        //Reset the file chooser for the next time it's shown.
        fc.setSelectedFile(null);
}//GEN-LAST:event_logoSelectButtonMouseClicked

    private static void populateCombo (JComboBox DisplayCombo, List <String> defaults){
        DefaultComboBoxModel dcm = new DefaultComboBoxModel();
        DisplayCombo.setModel(dcm); 
        //add default values
        for (String item : defaults){
            dcm.addElement(item);
        }
    }
    
    private void titleColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleColorButtonMouseClicked
        // change color
        Color initialColor = new Color(0x3AC4FF);
        if (! titleColorTextField.getText().isEmpty()) {
            String prevColor=titleColorTextField.getText();
            prevColor="0x"+prevColor;//NOI18N
            initialColor= Color.decode(prevColor);
        }

        Color titleColor = JColorChooser.showDialog(null, java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("JCOLORCHOOSER_SAMPLE"),
                initialColor);
        if (titleColor != null) {
            String rgb = Integer.toHexString(titleColor.getRGB());
            rgb = rgb.substring(2, rgb.length());
            titleColorTextField.setText(rgb);
        }
}//GEN-LAST:event_titleColorButtonMouseClicked

    private void themeShadRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeShadRadioButtonActionPerformed
        // Show shadow theme
        prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_shad_200.png"))); // NOI18N
    }//GEN-LAST:event_themeShadRadioButtonActionPerformed

    private void themeStdRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeStdRadioButtonActionPerformed
        // Show standard theme
        prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_std_200.png"))); // NOI18N
    }//GEN-LAST:event_themeStdRadioButtonActionPerformed

    private void themeGreenRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeGreenRadioButtonActionPerformed
        // Show green theme
        prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_green_200.png"))); // NOI18N
    }//GEN-LAST:event_themeGreenRadioButtonActionPerformed

    private void themeElegantRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeElegantRadioButtonActionPerformed
        // Show elegant theme
        prevLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/css_eleg_200.png"))); // NOI18N
    }//GEN-LAST:event_themeElegantRadioButtonActionPerformed

private void cssButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cssButtonMouseClicked
// show a chooser for css file
        JFileChooser fc=null;
        if (fc == null) {
            fc = new JFileChooser();

            //Add a custom file filter and disable the default
            //(Accept All) file filter.
            fc.addChoosableFileFilter(new CssFilter());
            fc.setAcceptAllFileFilterUsed(false);

            //Add custom icons for file types.
            //fc.setFileView(new ImageFileView());

            //Add the preview pane.
            //fc.setAccessory(new ImagePreview(fc));
        }

        //Show it.
        int returnVal = fc.showDialog(this,java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("OK"));

        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            cssTextField.setText(file.getAbsolutePath());
        }
        //Reset the file chooser for the next time it's shown.
        fc.setSelectedFile(null);
}//GEN-LAST:event_cssButtonMouseClicked

    private void chartSizeXTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chartSizeXTextFieldKeyTyped
        // allow only numbers a related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_chartSizeXTextFieldKeyTyped

    private void chartSizeYTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chartSizeYTextFieldKeyTyped
        // allow only numbers a related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_chartSizeYTextFieldKeyTyped

    private void celsiusRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_celsiusRadioButtonActionPerformed
        
    }//GEN-LAST:event_celsiusRadioButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    
    private void initialWiz() {
        wizPanel.setVisible(Global.firstStartup);
        resetButton.setVisible(!Global.firstStartup);
        if (!Global.firstStartup) {
            jTabbedPane1.remove(wizPanel);            
            schedulerEnabledCheckBox.setSelected(false);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JPanel ReportsPanel;
    private javax.swing.JPanel UnitsPanel;
    private javax.swing.JRadioButton aquariumSFRadioButton;
    private javax.swing.JCheckBox askStartupPanelCheckBox;
    private javax.swing.JLabel browserLabel;
    private javax.swing.JButton browserSelectButton;
    private javax.swing.JTextField browserTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel capacityPanel;
    private javax.swing.JRadioButton celsiusRadioButton;
    private javax.swing.JLabel chartSizeLabel;
    private javax.swing.JTextField chartSizeXTextField;
    private javax.swing.JTextField chartSizeYTextField;
    private javax.swing.JTextField clTextField1;
    private javax.swing.JTextField clTextField1u;
    private javax.swing.JTextField clTextField2;
    private javax.swing.JTextField clTextField2u;
    private javax.swing.JTextField clTextField3;
    private javax.swing.JTextField clTextField4;
    private javax.swing.JTextField clTextField5;
    private javax.swing.JTextField clTextField5u;
    private javax.swing.JRadioButton cmRadioButton;
    private javax.swing.JButton cssButton;
    private javax.swing.JLabel cssLabel;
    private javax.swing.JTextField cssTextField;
    private javax.swing.JLabel customLabel;
    private javax.swing.JLabel customLabel1;
    private javax.swing.JLabel customLabel2;
    private javax.swing.JLabel customLabel3;
    private javax.swing.JLabel customLabel4;
    private javax.swing.JLabel customLabel5;
    private javax.swing.JLabel customLabelb;
    private javax.swing.JPanel customLabelsPanel;
    private javax.swing.JComboBox dateFormatComboBox;
    private javax.swing.JLabel dateFormatLabel;
    private javax.swing.JPanel degreePanel;
    private javax.swing.JRadioButton degreeRadioButton;
    private javax.swing.JCheckBox enableInFormsCheckBox;
    private javax.swing.JCheckBox enableInReportsCheckBox;
    private javax.swing.JCheckBox expensesPresetsCheckBox;
    private javax.swing.JRadioButton fahrenheitRadioButton;
    private javax.swing.JComboBox fishbaseHostComboBox;
    private javax.swing.JLabel fishbaseHostLabel;
    private javax.swing.JPanel fishbasePanel;
    private javax.swing.JLabel fishbaseTimeoutLabel;
    private javax.swing.JSpinner fishbaseTimeoutSpinner;
    private javax.swing.JLabel footerLabel;
    private javax.swing.JTextField footerTextField;
    private javax.swing.JCheckBox generateAllCheckBox;
    private javax.swing.JCheckBox gnuplotCheckBox;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JCheckBox incExpCheckBox;
    private javax.swing.JRadioButton inchRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel kwCostLabel;
    private javax.swing.JTextField kwCostTextField;
    private javax.swing.ButtonGroup lenghtButtonGroup;
    private javax.swing.JPanel linearPanel;
    private javax.swing.JRadioButton litersRadioButton;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JButton logoSelectButton;
    private javax.swing.JTextField logoTextField;
    private javax.swing.JCheckBox maintenancePresetsCheckBox;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton ppmRadioButton;
    private javax.swing.JPanel presetsPanel;
    private javax.swing.JLabel prevLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JCheckBox saveWinPosCheckBox;
    private javax.swing.JCheckBox schedulerEnabledCheckBox;
    private javax.swing.JPanel schedulerPanel;
    private javax.swing.JRadioButton schedulerSFRadioButton;
    private javax.swing.ButtonGroup startFormButtonGroup;
    private javax.swing.ButtonGroup tempButtonGroup;
    private javax.swing.JPanel tempPanel;
    private javax.swing.ButtonGroup themeButtonGroup;
    private javax.swing.JRadioButton themeElegantRadioButton;
    private javax.swing.JRadioButton themeGreenRadioButton;
    private javax.swing.JRadioButton themeShadRadioButton;
    private javax.swing.JRadioButton themeStdRadioButton;
    private javax.swing.JPanel themesPanel;
    private javax.swing.JButton titleColorButton;
    private javax.swing.JLabel titleColorLabel;
    private javax.swing.JTextField titleColorTextField;
    private javax.swing.JLabel unitsHintLabel;
    private javax.swing.JRadioButton usgalRadioButton;
    private javax.swing.JCheckBox utf8CheckBox;
    private javax.swing.ButtonGroup volumeButtonGroup;
    private javax.swing.ButtonGroup waterHardnessButtonGroup;
    private javax.swing.JTextArea welcomeLabel;
    private javax.swing.JPanel wizPanel;
    private javax.swing.JLabel xLabel;
    // End of variables declaration//GEN-END:variables
    
    private int returnStatus = RET_CANCEL;
    
}
