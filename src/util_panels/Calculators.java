/*
 * Nyagua - Aquarium Manager
 *    Copyright (C) 2010 Rudi Giacomini Pilon
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 */

/*
 * Calculators.java
 *
 * Created on 4-ott-2011, 15.57.16
 */
package util_panels;

import dispatching.Watched;
import dispatching.Watcher;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import nyagua.AppUtil;
import nyagua.ContextMenuMouseListener;
import nyagua.Global;
import nyagua.LocUtil;
import nyagua.Util;
import nyagua.data.Aquarium;

/**
 *
 * @author giacomini
 */
public class Calculators extends javax.swing.JPanel {
    //Connect listener to application bus
    ActionListener al = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if(e.getID()==Watched.CHANGED_UNITS_SETTINGS){
                refreshOptions();
            } 
            else if (e.getID()==Watched.AQUARIUM_CLICKED){
                setCurrentAquarium();
            } 
        }
    };            
    Watcher settingWatch=new Watcher(al);

    /** Creates new form Calculators */
    public Calculators() {
        initComponents();  
        initCutAndPaste();  
        refreshOptions();
        Watched nyMessages=Watched.getInstance();
        nyMessages.addObserver(settingWatch);
    }
    
    /**
     * Check input fields to enable or disable calc button
     * 
     */
    private void checkKHPHCOFields(){
         int numpar=3;
         if (utilityKhTextField.getText().isEmpty()){
             numpar-- ;
         } else if(Double.parseDouble(LocUtil.delocalizeDouble( utilityKhTextField.getText()))==0){
             numpar-- ;
         }
         if (utilityPhTextField.getText().isEmpty()){
             numpar-- ;
         }else if(Double.parseDouble(LocUtil.delocalizeDouble( utilityPhTextField.getText()))==0){
             numpar-- ;
         }
         if (utilityCo2TextField.getText().isEmpty()){
             numpar-- ;
         }else if(Double.parseDouble(LocUtil.delocalizeDouble( utilityCo2TextField.getText()))==0){
             numpar-- ;
         }
         if (numpar!=2){
            utilityPhKhCo2CalcButton.setEnabled(false);
         }else{
             utilityPhKhCo2CalcButton.setEnabled(true);
         }
    }
        
            
    /** This is called when global settings change */
    public final void refreshOptions(){        
        if (Global.khunit.matches("degree")){
            utilityDegRadioButton.setSelected(true);
            
        }else{
            utilityPpmRadioButton.setSelected(true);            
        }
        if (Global.temperatureunit.matches("C")){
            utilityHCCRadioButton.setSelected(true);
            utilityPFCmRadioButton.setSelected(true);
        }else{
            utilityHCFRadioButton.setSelected(true);
            utilityPFInchRadioButton.setSelected(true);
        }
        if (Global.lenghtunit.matches("cm")){
            utilityHCCmRadioButton.setSelected(true);
        }else{
            utilityHCInchRadioButton.setSelected(true);
        }
    }
    
    public final void setCurrentAquarium () {
        if (Global.AqID == 0) {//deselected
            //clean fields
            JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
            utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
            };
            Util.CleanTextFields(jtfList);
            utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));            
        }
        else { //selected
            Aquarium aquarium = Aquarium.getById(Global.AqID);
            utilityHCTankDeepTextField.setText(aquarium.getDepth());
            utilityHCTankWidthTextField.setText(aquarium.getWidth());
            utilityHCWaterHeightTextField.setText(aquarium.getHeight());
            utilityHCThickTextField.setText(aquarium.getGlassTick());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        relationButtons = new javax.swing.ButtonGroup();
        supportButtons = new javax.swing.ButtonGroup();
        pumpunitsButtons = new javax.swing.ButtonGroup();
        sizeunitsButtons = new javax.swing.ButtonGroup();
        tempUnitsButtons = new javax.swing.ButtonGroup();
        tankMatButtons = new javax.swing.ButtonGroup();
        phKhCo2RelationPanel = new javax.swing.JPanel();
        utilityPhLabel = new javax.swing.JLabel();
        utilityPhTextField = new javax.swing.JTextField();
        utilityDegRadioButton = new javax.swing.JRadioButton();
        utilityPpmRadioButton = new javax.swing.JRadioButton();
        utilityKhLabel = new javax.swing.JLabel();
        utilityKhTextField = new javax.swing.JTextField();
        utilityCo2Label = new javax.swing.JLabel();
        utilityCo2TextField = new javax.swing.JTextField();
        utilityPhKhCo2CalcButton = new javax.swing.JButton();
        utilityPhKhCo2CleanButton = new javax.swing.JButton();
        heaterCalculatorPanel = new javax.swing.JPanel();
        utilityHCTankPanel = new javax.swing.JPanel();
        utilityHCGlassRadioButton = new javax.swing.JRadioButton();
        UtilityHCAcrylicRadioButton = new javax.swing.JRadioButton();
        utilityHCTankWidthLabel = new javax.swing.JLabel();
        utilityHCTankWidthTextField = new javax.swing.JTextField();
        utilityHCTankDeepLabel = new javax.swing.JLabel();
        utilityHCTankDeepTextField = new javax.swing.JTextField();
        utilityHCWaterHeightLabel = new javax.swing.JLabel();
        utilityHCWaterHeightTextField = new javax.swing.JTextField();
        utilityHCThickLabel = new javax.swing.JLabel();
        utilityHCThickTextField = new javax.swing.JTextField();
        utilityHCSupportPanel = new javax.swing.JPanel();
        utilityHCSupportWoodRadioButton = new javax.swing.JRadioButton();
        utilityHCSupportFeltRadioButton = new javax.swing.JRadioButton();
        utilityHCSupportGumRadioButton = new javax.swing.JRadioButton();
        utilityHCSupportOpenRadioButton = new javax.swing.JRadioButton();
        utilityHCCalcPanel = new javax.swing.JPanel();
        utilityHCCalcButton = new javax.swing.JButton();
        utilityHCMaintLabel = new javax.swing.JLabel();
        utilityHCMaintResultLabel = new javax.swing.JLabel();
        utilityHCMinLabel = new javax.swing.JLabel();
        utilityHCMinResultLabel = new javax.swing.JLabel();
        utilityHCCleanButton = new javax.swing.JButton();
        utilityHCUnitsPanel = new javax.swing.JPanel();
        utilityHCCmRadioButton = new javax.swing.JRadioButton();
        utilityHCInchRadioButton = new javax.swing.JRadioButton();
        utilityHCCRadioButton = new javax.swing.JRadioButton();
        utilityHCFRadioButton = new javax.swing.JRadioButton();
        utilityHCDeltaTempPanel = new javax.swing.JPanel();
        utilityHCDeltaTempLabel = new javax.swing.JLabel();
        utilityHCDeltaTempTextField = new javax.swing.JTextField();
        pumpFlowPanel = new javax.swing.JPanel();
        utilityPFDeliveryLabel = new javax.swing.JLabel();
        utilityPFDeliveryTextField = new javax.swing.JTextField();
        utilityPFSectionLabel = new javax.swing.JLabel();
        utilityPFSectionTextField = new javax.swing.JTextField();
        utilityPFSpeedLabel = new javax.swing.JLabel();
        utilityPFSpeedTextField = new javax.swing.JTextField();
        utilityPFCalcButton = new javax.swing.JButton();
        utilityPFUnitsPanel = new javax.swing.JPanel();
        utilityPFCmRadioButton = new javax.swing.JRadioButton();
        utilityPFInchRadioButton = new javax.swing.JRadioButton();
        utilityPFCleanButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("nyagua/Bundle"); // NOI18N
        phKhCo2RelationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.phKhCo2RelationPanel.border.title"))); // NOI18N
        phKhCo2RelationPanel.setLayout(new java.awt.GridBagLayout());

        utilityPhLabel.setText(bundle.getString("Ny.utilityPhLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityPhLabel, gridBagConstraints);

        utilityPhTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityPhTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityPhTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityPhTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityPhTextField, gridBagConstraints);

        relationButtons.add(utilityDegRadioButton);
        utilityDegRadioButton.setSelected(true);
        utilityDegRadioButton.setText(bundle.getString("degree")); // NOI18N
        utilityDegRadioButton.setAlignmentY(0.0F);
        utilityDegRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityDegRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityDegRadioButton, gridBagConstraints);

        relationButtons.add(utilityPpmRadioButton);
        utilityPpmRadioButton.setText(bundle.getString("ppm")); // NOI18N
        utilityPpmRadioButton.setActionCommand(bundle.getString("ppm")); // NOI18N
        utilityPpmRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityPpmRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityPpmRadioButton, gridBagConstraints);

        utilityKhLabel.setText(bundle.getString("Ny.utilityKhLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityKhLabel, gridBagConstraints);

        utilityKhTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityKhTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityKhTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityKhTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityKhTextField, gridBagConstraints);

        utilityCo2Label.setText(bundle.getString("Ny.utilityCo2Label.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityCo2Label, gridBagConstraints);

        utilityCo2TextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityCo2TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityCo2TextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityCo2TextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityCo2TextField, gridBagConstraints);

        utilityPhKhCo2CalcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calculator2.png"))); // NOI18N
        utilityPhKhCo2CalcButton.setToolTipText(bundle.getString("Calc")); // NOI18N
        utilityPhKhCo2CalcButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        utilityPhKhCo2CalcButton.setEnabled(false);
        utilityPhKhCo2CalcButton.setMargin(new java.awt.Insets(2, 14, 2, 2));
        utilityPhKhCo2CalcButton.setMaximumSize(new java.awt.Dimension(42, 42));
        utilityPhKhCo2CalcButton.setMinimumSize(new java.awt.Dimension(42, 42));
        utilityPhKhCo2CalcButton.setPreferredSize(new java.awt.Dimension(42, 42));
        utilityPhKhCo2CalcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityPhKhCo2CalcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityPhKhCo2CalcButton, gridBagConstraints);

        utilityPhKhCo2CleanButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/btn_clear.png"))); // NOI18N
        utilityPhKhCo2CleanButton.setToolTipText(bundle.getString("Clear_Fields")); // NOI18N
        utilityPhKhCo2CleanButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        utilityPhKhCo2CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityPhKhCo2CleanButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        phKhCo2RelationPanel.add(utilityPhKhCo2CleanButton, gridBagConstraints);

        heaterCalculatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.heaterCalculatorPanel.border.title"))); // NOI18N
        heaterCalculatorPanel.setMinimumSize(new java.awt.Dimension(100, 100));
        heaterCalculatorPanel.setLayout(new java.awt.GridBagLayout());

        utilityHCTankPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.utilityHCTankPanel.border.title"))); // NOI18N
        utilityHCTankPanel.setMinimumSize(new java.awt.Dimension(200, 100));
        utilityHCTankPanel.setLayout(new java.awt.GridBagLayout());

        tankMatButtons.add(utilityHCGlassRadioButton);
        utilityHCGlassRadioButton.setSelected(true);
        utilityHCGlassRadioButton.setText(bundle.getString("Ny.utilityHCGlassRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCGlassRadioButton, gridBagConstraints);

        tankMatButtons.add(UtilityHCAcrylicRadioButton);
        UtilityHCAcrylicRadioButton.setText(bundle.getString("Ny.UtilityHCAcrylicRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(UtilityHCAcrylicRadioButton, gridBagConstraints);

        utilityHCTankWidthLabel.setText(bundle.getString("WIDTH")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCTankWidthLabel, gridBagConstraints);

        utilityHCTankWidthTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        utilityHCTankWidthTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityHCTankWidthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityHCTankWidthTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityHCTankWidthTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCTankWidthTextField, gridBagConstraints);

        utilityHCTankDeepLabel.setText(bundle.getString("LENGHT")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCTankDeepLabel, gridBagConstraints);

        utilityHCTankDeepTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        utilityHCTankDeepTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityHCTankDeepTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityHCTankDeepTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityHCTankDeepTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCTankDeepTextField, gridBagConstraints);

        utilityHCWaterHeightLabel.setText(bundle.getString("HEIGHT")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCWaterHeightLabel, gridBagConstraints);

        utilityHCWaterHeightTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityHCWaterHeightTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityHCWaterHeightTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityHCWaterHeightTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCWaterHeightTextField, gridBagConstraints);

        utilityHCThickLabel.setText(bundle.getString("Ny.utilityHCThickLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCThickLabel, gridBagConstraints);

        utilityHCThickTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityHCThickTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityHCThickTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityHCThickTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        utilityHCTankPanel.add(utilityHCThickTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        heaterCalculatorPanel.add(utilityHCTankPanel, gridBagConstraints);

        utilityHCSupportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.utilityHCSupportPanel.border.title"))); // NOI18N
        utilityHCSupportPanel.setMinimumSize(new java.awt.Dimension(120, 100));
        utilityHCSupportPanel.setLayout(new java.awt.GridBagLayout());

        supportButtons.add(utilityHCSupportWoodRadioButton);
        utilityHCSupportWoodRadioButton.setSelected(true);
        utilityHCSupportWoodRadioButton.setText(bundle.getString("Ny.utilityHCSupportWoodRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        utilityHCSupportPanel.add(utilityHCSupportWoodRadioButton, gridBagConstraints);

        supportButtons.add(utilityHCSupportFeltRadioButton);
        utilityHCSupportFeltRadioButton.setText(bundle.getString("Ny.utilityHCSupportFeltRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        utilityHCSupportPanel.add(utilityHCSupportFeltRadioButton, gridBagConstraints);

        supportButtons.add(utilityHCSupportGumRadioButton);
        utilityHCSupportGumRadioButton.setText(bundle.getString("Ny.utilityHCSupportGumRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        utilityHCSupportPanel.add(utilityHCSupportGumRadioButton, gridBagConstraints);

        supportButtons.add(utilityHCSupportOpenRadioButton);
        utilityHCSupportOpenRadioButton.setText(bundle.getString("Ny.utilityHCSupportOpenRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        utilityHCSupportPanel.add(utilityHCSupportOpenRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        heaterCalculatorPanel.add(utilityHCSupportPanel, gridBagConstraints);

        utilityHCCalcPanel.setMinimumSize(new java.awt.Dimension(120, 100));
        utilityHCCalcPanel.setLayout(new java.awt.GridBagLayout());

        utilityHCCalcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calculator2.png"))); // NOI18N
        utilityHCCalcButton.setToolTipText(bundle.getString("Calc")); // NOI18N
        utilityHCCalcButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        utilityHCCalcButton.setEnabled(false);
        utilityHCCalcButton.setMaximumSize(new java.awt.Dimension(42, 42));
        utilityHCCalcButton.setMinimumSize(new java.awt.Dimension(42, 42));
        utilityHCCalcButton.setPreferredSize(new java.awt.Dimension(42, 42));
        utilityHCCalcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityHCCalcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 5);
        utilityHCCalcPanel.add(utilityHCCalcButton, gridBagConstraints);

        utilityHCMaintLabel.setText(bundle.getString("Ny.utilityHCMaintLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 15);
        utilityHCCalcPanel.add(utilityHCMaintLabel, gridBagConstraints);

        utilityHCMaintResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        utilityHCMaintResultLabel.setText(bundle.getString("Ny.utilityHCMaintResultLabel.text")); // NOI18N
        utilityHCMaintResultLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        utilityHCMaintResultLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        utilityHCCalcPanel.add(utilityHCMaintResultLabel, gridBagConstraints);

        utilityHCMinLabel.setText(bundle.getString("Ny.utilityHCMinLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        utilityHCCalcPanel.add(utilityHCMinLabel, gridBagConstraints);

        utilityHCMinResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        utilityHCMinResultLabel.setText(bundle.getString("Ny.utilityHCMinResultLabel.text")); // NOI18N
        utilityHCMinResultLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        utilityHCMinResultLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 15);
        utilityHCCalcPanel.add(utilityHCMinResultLabel, gridBagConstraints);

        utilityHCCleanButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/btn_clear.png"))); // NOI18N
        utilityHCCleanButton.setToolTipText(bundle.getString("Clear_Fields")); // NOI18N
        utilityHCCleanButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        utilityHCCleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityHCCleanButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 15);
        utilityHCCalcPanel.add(utilityHCCleanButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        heaterCalculatorPanel.add(utilityHCCalcPanel, gridBagConstraints);

        utilityHCUnitsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.utilityHCUnitsPanel.border.title"))); // NOI18N
        utilityHCUnitsPanel.setLayout(new java.awt.GridBagLayout());

        sizeunitsButtons.add(utilityHCCmRadioButton);
        utilityHCCmRadioButton.setSelected(true);
        utilityHCCmRadioButton.setText(bundle.getString("Ny.utilityHCCmRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 6);
        utilityHCUnitsPanel.add(utilityHCCmRadioButton, gridBagConstraints);

        sizeunitsButtons.add(utilityHCInchRadioButton);
        utilityHCInchRadioButton.setText(bundle.getString("Ny.utilityHCInchRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 6);
        utilityHCUnitsPanel.add(utilityHCInchRadioButton, gridBagConstraints);

        tempUnitsButtons.add(utilityHCCRadioButton);
        utilityHCCRadioButton.setSelected(true);
        utilityHCCRadioButton.setText(bundle.getString("_C")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        utilityHCUnitsPanel.add(utilityHCCRadioButton, gridBagConstraints);

        tempUnitsButtons.add(utilityHCFRadioButton);
        utilityHCFRadioButton.setText(bundle.getString("_F")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        utilityHCUnitsPanel.add(utilityHCFRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        heaterCalculatorPanel.add(utilityHCUnitsPanel, gridBagConstraints);

        utilityHCDeltaTempPanel.setLayout(new java.awt.GridBagLayout());

        utilityHCDeltaTempLabel.setText(bundle.getString("Ny.utilityHCDeltaTempLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        utilityHCDeltaTempPanel.add(utilityHCDeltaTempLabel, gridBagConstraints);

        utilityHCDeltaTempTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityHCDeltaTempTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityHCDeltaTempTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityHCDeltaTempTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        utilityHCDeltaTempPanel.add(utilityHCDeltaTempTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 11, 5);
        heaterCalculatorPanel.add(utilityHCDeltaTempPanel, gridBagConstraints);

        pumpFlowPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("utility.pumpFlowPanel.Title"))); // NOI18N
        pumpFlowPanel.setLayout(new java.awt.GridBagLayout());

        utilityPFDeliveryLabel.setText(bundle.getString("utilityPF.DeliveryLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 15, 3, 3);
        pumpFlowPanel.add(utilityPFDeliveryLabel, gridBagConstraints);

        utilityPFDeliveryTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        utilityPFDeliveryTextField.setName(""); // NOI18N
        utilityPFDeliveryTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityPFDeliveryTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityPFDeliveryTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityPFDeliveryTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFDeliveryTextField, gridBagConstraints);

        utilityPFSectionLabel.setText(bundle.getString("utilityPF.SectionLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFSectionLabel, gridBagConstraints);

        utilityPFSectionTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        utilityPFSectionTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        utilityPFSectionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                utilityPFSectionTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                utilityPFSectionTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFSectionTextField, gridBagConstraints);

        utilityPFSpeedLabel.setText(bundle.getString("utilityPF.SpeedLabel")); // NOI18N
        utilityPFSpeedLabel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFSpeedLabel, gridBagConstraints);

        utilityPFSpeedTextField.setEditable(false);
        utilityPFSpeedTextField.setMinimumSize(new java.awt.Dimension(54, 19));
        utilityPFSpeedTextField.setName(""); // NOI18N
        utilityPFSpeedTextField.setPreferredSize(new java.awt.Dimension(54, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFSpeedTextField, gridBagConstraints);

        utilityPFCalcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calculator2.png"))); // NOI18N
        utilityPFCalcButton.setToolTipText(bundle.getString("Calc")); // NOI18N
        utilityPFCalcButton.setEnabled(false);
        utilityPFCalcButton.setMaximumSize(new java.awt.Dimension(42, 42));
        utilityPFCalcButton.setMinimumSize(new java.awt.Dimension(42, 42));
        utilityPFCalcButton.setPreferredSize(new java.awt.Dimension(42, 42));
        utilityPFCalcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityPFCalcButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFCalcButton, gridBagConstraints);

        utilityPFUnitsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("Ny.utilityHCUnitsPanel.border.title"))); // NOI18N
        utilityPFUnitsPanel.setLayout(new java.awt.GridBagLayout());

        pumpunitsButtons.add(utilityPFCmRadioButton);
        utilityPFCmRadioButton.setSelected(true);
        utilityPFCmRadioButton.setText(bundle.getString("Ny.utilityPFCmRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 6);
        utilityPFUnitsPanel.add(utilityPFCmRadioButton, gridBagConstraints);

        pumpunitsButtons.add(utilityPFInchRadioButton);
        utilityPFInchRadioButton.setText(bundle.getString("Ny.utilityPFInchRadioButton.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 6);
        utilityPFUnitsPanel.add(utilityPFInchRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pumpFlowPanel.add(utilityPFUnitsPanel, gridBagConstraints);

        utilityPFCleanButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/btn_clear.png"))); // NOI18N
        utilityPFCleanButton.setToolTipText(bundle.getString("Clear_Fields")); // NOI18N
        utilityPFCleanButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        utilityPFCleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilityPFCleanButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 20);
        pumpFlowPanel.add(utilityPFCleanButton, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phKhCo2RelationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heaterCalculatorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pumpFlowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(phKhCo2RelationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(heaterCalculatorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pumpFlowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void utilityDegRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityDegRadioButtonActionPerformed
        // Set khunits at degree
        Global.khunit = "degree";
}//GEN-LAST:event_utilityDegRadioButtonActionPerformed

    private void utilityPpmRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityPpmRadioButtonActionPerformed
        // Set khunits at ppm
        Global.khunit = "ppm";
}//GEN-LAST:event_utilityPpmRadioButtonActionPerformed

    /**
     * Calculate Heater watts
     * 1) Required to support the tank temperature
     * 2) Minimum required
     *
     */
    private void heaterCalculator (){
        /**
         * Formula used:
         *
         * fahrenheit to celsius    °C = (°F − 32) / 1,8
         *
         * For temperature intervals rather than specific temperatures,
         * 1 °F =  5⁄9 °C = 5⁄9 K
         *
         * kelvin to celsius        T(°C) = T(K) - 273,15
         * inch to cm               cm = in * 2.54
         * Joule to cal              J = cal x 0.23889
         * (1J=1W/sec)
         *
         * one dimensional heat conduction; Q= k AdT/s
         * units:in 1 W m−1 K−1 = 418.7 x cal cm cm−2 s−1 C−1
         * k=material thermal conductivity
         * A=area (surface) of material
         * s=thick (section) of material
         * dT= delta of temperature
         */

        //Thermal Conductivity materials coefficients (at 20°C)
        //in cal cm cm−2 s−1 C−1
        final double TC_GLASS= 0.0025;
        final double TC_ACRYLIC=0.0004;
        final double TC_FELT=0.00009;
        final double TC_WOOD=0.0002;
        final double TC_GUM=0.00005;
        final double TC_OPEN=0.025;

        double materialCoefficient;
        double supportCoefficient;    
        double area;

        //check that text fields are filled
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        for (JTextField jtfList1 : jtfList) {
            if (jtfList1.getText().isEmpty()) {
                JOptionPane.showMessageDialog (null,
                        java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("_PLEASE_FILL_ALL_FIELDS_TO_DO_CALC"),
                        java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),JOptionPane.ERROR_MESSAGE );
                jtfList1.requestFocus();
                return;
            }
        }
        double sizefactor=1;    //inputs in cm
        if (utilityHCInchRadioButton.isSelected()){
            sizefactor=2.54;    //inch multiplier (input in inch)
        }
        double tankWidth = Double.valueOf(LocUtil.delocalizeDouble(utilityHCTankWidthTextField.getText()))*sizefactor;
        double tankDeep =Double.valueOf(LocUtil.delocalizeDouble(utilityHCTankDeepTextField.getText()))*sizefactor;
        double waterLevel =Double.valueOf(LocUtil.delocalizeDouble(utilityHCWaterHeightTextField.getText()))*sizefactor;
        double wallTick =Double.valueOf(LocUtil.delocalizeDouble(utilityHCThickTextField.getText()))*sizefactor;
        double deltaTemperature=Double.valueOf(LocUtil.delocalizeDouble(utilityHCDeltaTempTextField.getText())); //input in °C
        if (utilityHCFRadioButton.isSelected()){
            deltaTemperature=(deltaTemperature*9)/5; //input in °F -> °C
        }

        if (utilityHCSupportWoodRadioButton.isSelected()){
            supportCoefficient=TC_WOOD;
        }else if (utilityHCSupportFeltRadioButton.isSelected()){
            supportCoefficient=TC_FELT;
        }else if (utilityHCSupportGumRadioButton.isSelected()){
            supportCoefficient=TC_GUM;
        } else {
            supportCoefficient=TC_OPEN;
        }

        if (utilityHCGlassRadioButton.isSelected()){
            materialCoefficient=TC_GLASS;
        } else {
            materialCoefficient=TC_ACRYLIC;
        }

        //calculating termal surface aprox to water level (not to tank height)
        area=(2*tankWidth*waterLevel) + (2*waterLevel*tankDeep) + (tankWidth*tankDeep) +
                ((supportCoefficient/materialCoefficient)*tankWidth*tankDeep) ;
        double maintWatt=0.23889 * materialCoefficient * area *        
                deltaTemperature / wallTick;
        utilityHCMaintResultLabel.setText(LocUtil.localizeDouble(maintWatt));
        double minWatt=0.3371 * materialCoefficient * area * 
                       deltaTemperature / (0.9*wallTick);
        utilityHCMinResultLabel.setText(LocUtil.localizeDouble(minWatt));
    }
    
    private void utilityHCCalcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityHCCalcButtonActionPerformed
        // Calculate Heater Watts
        heaterCalculator();
}//GEN-LAST:event_utilityHCCalcButtonActionPerformed

    /**
     * Calculates pump speed in cm2/sec
     */
    private void pumpSpeedCalculator(){
        /**
         * Used formula:
         * Q= pump delivery in liters/h
         * A= minimum section of path trough pump or pipes
         * V= speed of the flow
         * Q=A*V*Cos(0) => V=Q/A*Cos(0)
         * for radial flow Cos(0)=1 =>
         * V=Q/A cm2/Sec
         * 1 cm=2.54 inch 1cm2= 2.54*2.54 inch2
         * V=Q/(A*6.4516) inch2/sec
         * 
         */       
        double sizefactor=1;    //inputs in cm
        if (utilityPFInchRadioButton.isSelected()){
            sizefactor=6.4516;    //inch multiplier (input in inch)
        }
        JTextField [] jtfList = { utilityPFDeliveryTextField, utilityPFSectionTextField};
        for (JTextField jtfList1 : jtfList) {
            if (jtfList1.getText().isEmpty()) {
                JOptionPane.showMessageDialog (null,
                        java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("_PLEASE_FILL_ALL_FIELDS_TO_DO_CALC"),
                        java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("ERROR"),JOptionPane.ERROR_MESSAGE );
                jtfList1.requestFocus();
                return;
            }
        }
        double delivery= Double.valueOf(LocUtil.delocalizeDouble(utilityPFDeliveryTextField.getText()));
        //change delivery from liters/hour to cm3/sec
        delivery=delivery/3.6;
        double section= Double.valueOf(LocUtil.delocalizeDouble(utilityPFSectionTextField.getText()));
        if (section==0) { //division by zero
            Util.showErrorMsg(java.util.ResourceBundle.getBundle("nyagua/Bundle").getString("INPUT_ERROR"));
            utilityPFSectionTextField.requestFocus();
            return;
        }
        double speed=delivery/(section*sizefactor);
        utilityPFSpeedTextField.setText(LocUtil.localizeDouble(speed));
    }   
    
private void utilityPFDeliveryTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPFDeliveryTextFieldKeyTyped
 //allow only numbers and related chars
    Util.checkNumericKey(evt);
}//GEN-LAST:event_utilityPFDeliveryTextFieldKeyTyped

private void utilityPFSectionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPFSectionTextFieldKeyTyped
//allow only numbers and related chars
    Util.checkNumericKey(evt);
}//GEN-LAST:event_utilityPFSectionTextFieldKeyTyped

    private void utilityHCDeltaTempTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCDeltaTempTextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityHCDeltaTempTextFieldKeyTyped

    private void utilityHCThickTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCThickTextFieldKeyTyped
        //allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityHCThickTextFieldKeyTyped

    private void utilityHCWaterHeightTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCWaterHeightTextFieldKeyTyped
        // allow only numbers and related chars
         Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityHCWaterHeightTextFieldKeyTyped

    private void utilityHCTankDeepTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCTankDeepTextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityHCTankDeepTextFieldKeyTyped

    private void utilityHCTankWidthTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCTankWidthTextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityHCTankWidthTextFieldKeyTyped

    private void utilityKhTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityKhTextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);        
    }//GEN-LAST:event_utilityKhTextFieldKeyTyped

    private void utilityPhTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPhTextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityPhTextFieldKeyTyped

    private void utilityCo2TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityCo2TextFieldKeyTyped
        // allow only numbers and related chars
        Util.checkNumericKey(evt);
    }//GEN-LAST:event_utilityCo2TextFieldKeyTyped

    private void utilityCo2TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityCo2TextFieldKeyReleased
        // check values
        checkKHPHCOFields();
    }//GEN-LAST:event_utilityCo2TextFieldKeyReleased

    private void utilityPhTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPhTextFieldKeyReleased
        //  check values
        checkKHPHCOFields();
    }//GEN-LAST:event_utilityPhTextFieldKeyReleased

    private void utilityKhTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityKhTextFieldKeyReleased
        //  check values
        checkKHPHCOFields();
    }//GEN-LAST:event_utilityKhTextFieldKeyReleased

    private void utilityHCDeltaTempTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCDeltaTempTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCDeltaTempTextFieldKeyReleased

    private void utilityHCThickTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCThickTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCThickTextFieldKeyReleased

    private void utilityHCWaterHeightTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCWaterHeightTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCWaterHeightTextFieldKeyReleased

    private void utilityHCTankDeepTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCTankDeepTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCTankDeepTextFieldKeyReleased

    private void utilityHCTankWidthTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityHCTankWidthTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCTankWidthTextFieldKeyReleased

    private void utilityPFDeliveryTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPFDeliveryTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityPFDeliveryTextField, utilityPFSectionTextField
        };
        utilityPFCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityPFDeliveryTextFieldKeyReleased

    private void utilityPFSectionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_utilityPFSectionTextFieldKeyReleased
        // check values
        JTextField [] jtfList = { utilityPFDeliveryTextField, utilityPFSectionTextField
        };
        utilityPFCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityPFSectionTextFieldKeyReleased

    private void utilityPhKhCo2CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityPhKhCo2CleanButtonActionPerformed
        // Clean Fields
        JTextField [] jtfList = {utilityCo2TextField,utilityKhTextField,utilityPhTextField};
        Util.CleanTextFields(jtfList);
        checkKHPHCOFields();
    }//GEN-LAST:event_utilityPhKhCo2CleanButtonActionPerformed

    private void utilityPhKhCo2CalcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityPhKhCo2CalcButtonActionPerformed
        // calc KH or PH or CO2 on utility page
        AppUtil.calcCO2(utilityKhTextField, utilityPhTextField, utilityCo2TextField);
        checkKHPHCOFields();
    }//GEN-LAST:event_utilityPhKhCo2CalcButtonActionPerformed

    private void utilityPFCalcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityPFCalcButtonActionPerformed
        // // Calculate pump flow speed
        pumpSpeedCalculator();
        JTextField [] jtfList = { utilityPFDeliveryTextField, utilityPFSectionTextField
        };
        utilityPFCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityPFCalcButtonActionPerformed

    private void utilityPFCleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityPFCleanButtonActionPerformed
        // Clean Fields
        JTextField [] jtfList = { utilityPFDeliveryTextField, utilityPFSectionTextField
        };
        Util.CleanTextFields(jtfList);
        utilityPFCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityPFCleanButtonActionPerformed

    private void utilityHCCleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilityHCCleanButtonActionPerformed
        // Clean Fields
        JTextField [] jtfList = { utilityHCTankDeepTextField,utilityHCTankWidthTextField,
        utilityHCWaterHeightTextField,utilityHCThickTextField,utilityHCDeltaTempTextField
        };
        Util.CleanTextFields(jtfList);
        utilityHCCalcButton.setEnabled(Util.CheckTestFields(jtfList));
    }//GEN-LAST:event_utilityHCCleanButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton UtilityHCAcrylicRadioButton;
    private javax.swing.JPanel heaterCalculatorPanel;
    private javax.swing.JPanel phKhCo2RelationPanel;
    private javax.swing.JPanel pumpFlowPanel;
    private javax.swing.ButtonGroup pumpunitsButtons;
    private javax.swing.ButtonGroup relationButtons;
    private javax.swing.ButtonGroup sizeunitsButtons;
    private javax.swing.ButtonGroup supportButtons;
    private javax.swing.ButtonGroup tankMatButtons;
    private javax.swing.ButtonGroup tempUnitsButtons;
    private javax.swing.JLabel utilityCo2Label;
    private javax.swing.JTextField utilityCo2TextField;
    private javax.swing.JRadioButton utilityDegRadioButton;
    private javax.swing.JRadioButton utilityHCCRadioButton;
    private javax.swing.JButton utilityHCCalcButton;
    private javax.swing.JPanel utilityHCCalcPanel;
    private javax.swing.JButton utilityHCCleanButton;
    private javax.swing.JRadioButton utilityHCCmRadioButton;
    private javax.swing.JLabel utilityHCDeltaTempLabel;
    private javax.swing.JPanel utilityHCDeltaTempPanel;
    private javax.swing.JTextField utilityHCDeltaTempTextField;
    private javax.swing.JRadioButton utilityHCFRadioButton;
    private javax.swing.JRadioButton utilityHCGlassRadioButton;
    private javax.swing.JRadioButton utilityHCInchRadioButton;
    private javax.swing.JLabel utilityHCMaintLabel;
    private javax.swing.JLabel utilityHCMaintResultLabel;
    private javax.swing.JLabel utilityHCMinLabel;
    private javax.swing.JLabel utilityHCMinResultLabel;
    private javax.swing.JRadioButton utilityHCSupportFeltRadioButton;
    private javax.swing.JRadioButton utilityHCSupportGumRadioButton;
    private javax.swing.JRadioButton utilityHCSupportOpenRadioButton;
    private javax.swing.JPanel utilityHCSupportPanel;
    private javax.swing.JRadioButton utilityHCSupportWoodRadioButton;
    private javax.swing.JLabel utilityHCTankDeepLabel;
    private javax.swing.JTextField utilityHCTankDeepTextField;
    private javax.swing.JPanel utilityHCTankPanel;
    private javax.swing.JLabel utilityHCTankWidthLabel;
    private javax.swing.JTextField utilityHCTankWidthTextField;
    private javax.swing.JLabel utilityHCThickLabel;
    private javax.swing.JTextField utilityHCThickTextField;
    private javax.swing.JPanel utilityHCUnitsPanel;
    private javax.swing.JLabel utilityHCWaterHeightLabel;
    private javax.swing.JTextField utilityHCWaterHeightTextField;
    private javax.swing.JLabel utilityKhLabel;
    private javax.swing.JTextField utilityKhTextField;
    private javax.swing.JButton utilityPFCalcButton;
    private javax.swing.JButton utilityPFCleanButton;
    private javax.swing.JRadioButton utilityPFCmRadioButton;
    private javax.swing.JLabel utilityPFDeliveryLabel;
    private javax.swing.JTextField utilityPFDeliveryTextField;
    private javax.swing.JRadioButton utilityPFInchRadioButton;
    private javax.swing.JLabel utilityPFSectionLabel;
    private javax.swing.JTextField utilityPFSectionTextField;
    private javax.swing.JLabel utilityPFSpeedLabel;
    private javax.swing.JTextField utilityPFSpeedTextField;
    private javax.swing.JPanel utilityPFUnitsPanel;
    private javax.swing.JButton utilityPhKhCo2CalcButton;
    private javax.swing.JButton utilityPhKhCo2CleanButton;
    private javax.swing.JLabel utilityPhLabel;
    private javax.swing.JTextField utilityPhTextField;
    private javax.swing.JRadioButton utilityPpmRadioButton;
    // End of variables declaration//GEN-END:variables

    /**
     * bind cutandpaste popup menu to text fields
     */
    private void initCutAndPaste(){
        utilityCo2TextField.addMouseListener(new ContextMenuMouseListener());
        utilityKhTextField.addMouseListener(new ContextMenuMouseListener());
        utilityPhTextField.addMouseListener(new ContextMenuMouseListener());
        utilityHCWaterHeightTextField.addMouseListener(new ContextMenuMouseListener());
        utilityHCTankDeepTextField.addMouseListener(new ContextMenuMouseListener());
        utilityHCTankWidthTextField.addMouseListener(new ContextMenuMouseListener());
        utilityHCThickTextField.addMouseListener(new ContextMenuMouseListener());
        utilityHCDeltaTempTextField.addMouseListener(new ContextMenuMouseListener());
        utilityPFDeliveryTextField.addMouseListener(new ContextMenuMouseListener());
        utilityPFSpeedTextField.addMouseListener(new ContextMenuMouseListener());
        utilityPFSectionTextField.addMouseListener(new ContextMenuMouseListener());
    }
}
